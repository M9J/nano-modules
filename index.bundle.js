"use strict";(self.webpackChunknano_modules=self.webpackChunknano_modules||[]).push([[57,896],{89:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var o="",t=void 0!==e[5];return e[4]&&(o+="@supports (".concat(e[4],") {")),e[2]&&(o+="@media ".concat(e[2]," {")),t&&(o+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),o+=n(e),t&&(o+="}"),e[2]&&(o+="}"),e[4]&&(o+="}"),o})).join("")},e.i=function(n,o,t,a,s){"string"==typeof n&&(n=[[null,n,void 0]]);var d={};if(t)for(var r=0;r<this.length;r++){var i=this[r][0];null!=i&&(d[i]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);t&&d[A[0]]||(void 0!==s&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=s),o&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=o):A[2]=o),a&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=a):A[4]="".concat(a)),e.push(A))}},e}},963:n=>{n.exports=function(n){var e=n[1],o=n[3];if(!o)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),s="/*# ".concat(a," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},70:(n,e,o)=>{async function t(){console.log("> Nanomod.js _");const n=[];try{const e=await async function(){try{let n=[];return n=await import(a),n}catch(n){console.log(n)}}();if(e){const o=e.default;if(Array.isArray(o)&&o.length>0)for(const e of o)n.push(e)}}catch(n){const{code:e,message:o}=n;console.log(`${e}: ${o}`)}return n}o.d(e,{A:()=>t});const a="https://M9J.github.io/nano_modules/index.js"},651:(n,e,o)=>{o.d(e,{h:()=>t});const t={"nano-modules":{build:"https://github.com/M9J/nano-modules/actions/workflows/actions.yml/badge.svg",deploy:"https://github.com/M9J/nano-modules/actions/workflows/pages/pages-build-deployment/badge.svg"},nano_modules:{build:"https://github.com/M9J/nano_modules/actions/workflows/actions.yml/badge.svg",deploy:"https://github.com/M9J/nano_modules/actions/workflows/pages/pages-build-deployment/badge.svg"}}},731:(n,e,o)=>{o.a(n,(async(n,e)=>{try{o(508);var t=o(70),a=o(651);function s(){const n=document.createElement("div");n.classList.add("nano_modules_container");const e=document.createElement("div");e.classList.add("nano_modules_title"),e.innerHTML="nano_modules";const o=document.createElement("div");return o.classList.add("nano_modules_modules"),o.id="nano_modules_modules",n.appendChild(e),n.appendChild(o),n.appendChild(p()),n}document.body.appendChild(s());const d=await(0,t.A)();if(d){const m=document.getElementById("nano_modules_modules");d.length>0?m.innerHTML="":m.innerHTML="<div class='nano_modules_no_modules'>No Modules found</div>";for(const[f,_]of d.entries())_&&i(_,f)}function r(n){if(n)return n.toString().replaceAll("() => import(","").replaceAll(")","").replaceAll('"',"")}async function i(n,e){let o=r(n),t="...",a=!1,s="...",d="...";const i=l(o,t,s,d,e);document.getElementById("nano_modules_modules").innerHTML+=i;const u=new((await n()).default);if(o=u.MODULE_NAME?u.MODULE_NAME:"-",t=u.MODULE_DESCRIPTION?u.MODULE_DESCRIPTION:"-",a=u.MODULE_PULSE||!1,s=u.MODULE_VERSION?u.MODULE_VERSION:"-",u.MODULE_MAIN&&"function"==typeof u.MODULE_MAIN)try{const n=A(e);d=await u.MODULE_MAIN(n)||""}catch(n){d=`<div class="nano_modules_module_error">${n.code}: ${n.message}</div>`}document.getElementById(`nano_module_${e}_name`).innerHTML=o,document.getElementById(`nano_module_${e}_description`).innerHTML=t,document.getElementById(`nano_module_${e}_version`).innerHTML=s,document.getElementById(`nano_module_${e}_output`).innerHTML=d,a&&document.getElementById(`nano_module_${e}_pulse`).classList.remove("hidden")}function l(n,e,o,t,a){return`\n<div class="nano_modules_module" id="nano_module_${a}">\n  <div class="nano_module_name">\n    <span class="bold">Name:</span>\n    <span id="nano_module_${a}_name">${n}</span>\n  </div>\n  <div class="nano_module_description">\n    <span class="bold">Description:</span>\n    <span id="nano_module_${a}_description">${e}</span>\n  </div>\n  <div class="nano_module_version">\n    <span class="bold">Version:</span>\n    <span id="nano_module_${a}_version">${o} </span>\n  </div>\n  <div class="nano_module_output">\n    <span class="bold">Output:</span>\n    &nbsp;<span\n      class="pulse hidden"\n      id="nano_module_${a}_pulse"\n    ></span>\n  </div>\n  <div\n    class="nano_module_output_restricted_scrollable"\n    id="nano_module_${a}_output"\n  >\n    ${t}\n  </div>\n</div>\n`}function A(n){return{print:u(n),printLineBefore:c(n)}}function u(n){return e=>{document.getElementById(`nano_module_${n}_output`).innerHTML=e}}function c(n){return e=>{const o=document.getElementById(`nano_module_${n}_output`),t=document.createElement("div");t.classList.add("nano_module_log"),t.innerHTML=e,o.prepend(t)}}function p(){const n=document.createElement("div");return n.classList.add("nano_modules_footer"),n.innerHTML=`\n  <div class="nano_modules_footer_row">\n    nano-modules/build: <img class="nano_modules_footer_badge" src="${a.h["nano-modules"].build}"/>\n  </div>\n  <div class="nano_modules_footer_row">\n    nano-modules/deploy: <img class="nano_modules_footer_badge" src="${a.h["nano-modules"].deploy}"/>\n  </div>\n  \x3c!-- <div class="nano_modules_footer_row">\n    nano_modules/build: <img class="nano_modules_footer_badge" src="${a.h.nano_modules.build}"/>\n  </div> --\x3e\n  <div class="nano_modules_footer_row">\n    nano_modules/deploy: <img class="nano_modules_footer_badge" src="${a.h.nano_modules.deploy}"/>\n  </div>\n  `,n}e()}catch(g){e(g)}}),1)},497:(n,e,o)=>{o.d(e,{A:()=>r});var t=o(963),a=o.n(t),s=o(89),d=o.n(s)()(a());d.push([n.id,"*,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 1em;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: #000;\n}\n\n.nano_modules_container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.nano_modules_title {\n  font-weight: bolder;\n  padding: 8px;\n  background-color: #000;\n  color: #fff;\n  position: sticky;\n  top: 0;\n  z-index: 1;\n}\n\n.nano_modules_modules {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 8px;\n  padding: 8px;\n  background: #eee;\n  flex: 1;\n  grid-auto-rows: max-content;\n}\n\n.nano_modules_module {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);\n  padding: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background: #fff;\n}\n\n.nano_modules_no_modules {\n  padding: 8px;\n}\n\n.nano_modules_module_error {\n  color: #f00;\n}\n\n.bold {\n  font-weight: bolder;\n}\n\n.nano_module_output {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.nano_module_output_restricted_scrollable {\n  max-height: 100px;\n  overflow: auto;\n}\n\n.pulse {\n  display: inline-block;\n  width: 16px;\n  height: 8px;\n  border-radius: 8px;\n  background: grey;\n  animation: pulse ease-in-out 1s infinite;\n}\n\n.hidden {\n  display: none;\n}\n\n.nano_modules_footer {\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.nano_modules_footer_row {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nano_modules_footer_badge {\n  margin-left: 8px;\n  max-height: 16px;\n}\n\n@keyframes pulsating {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes pulse {\n  0% {\n    background: silver;\n  }\n  25% {\n    background: greenyellow;\n  }\n  50% {\n    background: silver;\n  }\n  75% {\n    background: goldenrod;\n  }\n  100% {\n    background: silver;\n  }\n}\n","",{version:3,sources:["webpack://./src/nano-modules.css"],names:[],mappings:"AAAA;;EAEE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,cAAc;EACd,sBAAsB;EACtB,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;EACP,gBAAgB;AAClB;;AAEA;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,sBAAsB;EACtB,WAAW;EACX,gBAAgB;EAChB,MAAM;EACN,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,4DAA4D;EAC5D,aAAa;EACb,YAAY;EACZ,gBAAgB;EAChB,OAAO;EACP,2BAA2B;AAC7B;;AAEA;EACE,2CAA2C;EAC3C,YAAY;EACZ,oCAAoC;EACpC,gBAAgB;AAClB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,gBAAgB;EAChB,wCAAwC;AAC1C;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,YAAY;EACZ,aAAa;EACb,QAAQ;EACR,eAAe;EACf,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,2BAA2B;AAC7B;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;AACF;;AAEA;EACE;IACE,kBAAkB;EACpB;EACA;IACE,uBAAuB;EACzB;EACA;IACE,kBAAkB;EACpB;EACA;IACE,qBAAqB;EACvB;EACA;IACE,kBAAkB;EACpB;AACF",sourcesContent:["*,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 1em;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: #000;\n}\n\n.nano_modules_container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.nano_modules_title {\n  font-weight: bolder;\n  padding: 8px;\n  background-color: #000;\n  color: #fff;\n  position: sticky;\n  top: 0;\n  z-index: 1;\n}\n\n.nano_modules_modules {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 8px;\n  padding: 8px;\n  background: #eee;\n  flex: 1;\n  grid-auto-rows: max-content;\n}\n\n.nano_modules_module {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);\n  padding: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background: #fff;\n}\n\n.nano_modules_no_modules {\n  padding: 8px;\n}\n\n.nano_modules_module_error {\n  color: #f00;\n}\n\n.bold {\n  font-weight: bolder;\n}\n\n.nano_module_output {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.nano_module_output_restricted_scrollable {\n  max-height: 100px;\n  overflow: auto;\n}\n\n.pulse {\n  display: inline-block;\n  width: 16px;\n  height: 8px;\n  border-radius: 8px;\n  background: grey;\n  animation: pulse ease-in-out 1s infinite;\n}\n\n.hidden {\n  display: none;\n}\n\n.nano_modules_footer {\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.nano_modules_footer_row {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nano_modules_footer_badge {\n  margin-left: 8px;\n  max-height: 16px;\n}\n\n@keyframes pulsating {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes pulse {\n  0% {\n    background: silver;\n  }\n  25% {\n    background: greenyellow;\n  }\n  50% {\n    background: silver;\n  }\n  75% {\n    background: goldenrod;\n  }\n  100% {\n    background: silver;\n  }\n}\n"],sourceRoot:""}]);const r=d},508:(n,e,o)=>{var t=o(72),a=o.n(t),s=o(825),d=o.n(s),r=o(659),i=o.n(r),l=o(56),A=o.n(l),u=o(540),c=o.n(u),p=o(113),m=o.n(p),f=o(497),_={};_.styleTagTransform=m(),_.setAttributes=A(),_.insert=i().bind(null,"head"),_.domAPI=d(),_.insertStyleElement=c(),a()(f.A,_),f.A&&f.A.locals&&f.A.locals},72:n=>{var e=[];function o(n){for(var o=-1,t=0;t<e.length;t++)if(e[t].identifier===n){o=t;break}return o}function t(n,t){for(var s={},d=[],r=0;r<n.length;r++){var i=n[r],l=t.base?i[0]+t.base:i[0],A=s[l]||0,u="".concat(l," ").concat(A);s[l]=A+1;var c=o(u),p={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==c)e[c].references++,e[c].updater(p);else{var m=a(p,t);t.byIndex=r,e.splice(r,0,{identifier:u,updater:m,references:1})}d.push(u)}return d}function a(n,e){var o=e.domAPI(e);return o.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;o.update(n=e)}else o.remove()}}n.exports=function(n,a){var s=t(n=n||[],a=a||{});return function(n){n=n||[];for(var d=0;d<s.length;d++){var r=o(s[d]);e[r].references--}for(var i=t(n,a),l=0;l<s.length;l++){var A=o(s[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}s=i}}},659:n=>{var e={};n.exports=function(n,o){var t=function(n){if(void 0===e[n]){var o=document.querySelector(n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(n){o=null}e[n]=o}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(o)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,o)=>{n.exports=function(n){var e=o.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(o){!function(n,e,o){var t="";o.supports&&(t+="@supports (".concat(o.supports,") {")),o.media&&(t+="@media ".concat(o.media," {"));var a=void 0!==o.layer;a&&(t+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),t+=o.css,a&&(t+="}"),o.media&&(t+="}"),o.supports&&(t+="}");var s=o.sourceMap;s&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,o)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},n=>{n(n.s=731)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LElBQUlDLEVBQVlGLEVBQUlFLFVBQ2hCQSxHQUE2QixvQkFBVGpHLE9BQ3RCZ0csR0FBTyx1REFBdURoSCxPQUFPZ0IsS0FBS0UsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVNEYsTUFBZSxRQUt0SW5CLEVBQVFDLGtCQUFrQmlCLEVBQUs2QixFQUFjL0MsRUFBUUEsUUFDdkQsQ0FvQk1rRCxDQUFNSCxFQUFjL0MsRUFBU2lCLEVBQy9CLEVBQ0EvQixPQUFRLFlBckJaLFNBQTRCNkQsR0FFMUIsR0FBZ0MsT0FBNUJBLEVBQWFJLFdBQ2YsT0FBTyxFQUVUSixFQUFhSSxXQUFXQyxZQUFZTCxFQUN0QyxDQWdCTU0sQ0FBbUJOLEVBQ3JCLEVBRUosQyxVQzlDQXZKLEVBQU9DLFFBVlAsU0FBMkJ5SCxFQUFLNkIsR0FDOUIsR0FBSUEsRUFBYU8sV0FDZlAsRUFBYU8sV0FBV0MsUUFBVXJDLE1BQzdCLENBQ0wsS0FBTzZCLEVBQWFTLFlBQ2xCVCxFQUFhSyxZQUFZTCxFQUFhUyxZQUV4Q1QsRUFBYXpGLFlBQVlOLFNBQVN5RyxlQUFldkMsR0FDbkQsQ0FDRixDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9zcmMvTmFub01vZHVsZXMuanMiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vc3JjL2dpdGh1Yi1oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vc3JjL25hbm8tbW9kdWxlcy5qcyIsIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9zcmMvbmFuby1tb2R1bGVzLmNzcyIsIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9zcmMvbmFuby1tb2R1bGVzLmNzcz8zMDFkIiwid2VicGFjazovL25hbm8tbW9kdWxlcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL25hbm8tbW9kdWxlcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsImV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc29sZS5sb2coXCI+IE5hbm9tb2QuanMgX1wiKTtcbiAgY29uc3QgTkFOT01PRFVMRVMgPSBbXTtcblxuICB0cnkge1xuICAgIGNvbnN0IE1PRFVMRV9JTkRFWCA9IGF3YWl0IGdldE1vZHVsZUluZGV4KCk7XG4gICAgaWYgKE1PRFVMRV9JTkRFWCkge1xuICAgICAgY29uc3QgTU9EVUxFUyA9IE1PRFVMRV9JTkRFWC5kZWZhdWx0O1xuICAgICAgY29uc3QgaGFzTW9kdWxlcyA9IEFycmF5LmlzQXJyYXkoTU9EVUxFUykgPyBNT0RVTEVTLmxlbmd0aCA+IDAgOiBmYWxzZTtcbiAgICAgIGlmIChoYXNNb2R1bGVzKSB7XG4gICAgICAgIGZvciAoY29uc3QgTU9EVUxFIG9mIE1PRFVMRVMpIHtcbiAgICAgICAgICBOQU5PTU9EVUxFUy5wdXNoKE1PRFVMRSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zdCB7IGNvZGUsIG1lc3NhZ2UgfSA9IGU7XG4gICAgY29uc29sZS5sb2coYCR7Y29kZX06ICR7bWVzc2FnZX1gKTtcbiAgfVxuXG4gIHJldHVybiBOQU5PTU9EVUxFUztcbn1cblxuY29uc3QgTkFOT01PRFVMRVNfVVJMX0RFViA9IFwiLi9uYW5vX21vZHVsZXMvaW5kZXguanNcIjtcbmNvbnN0IE5BTk9NT0RVTEVTX1VSTF9QUk9EID0gXCJodHRwczovL005Si5naXRodWIuaW8vbmFub19tb2R1bGVzL2luZGV4LmpzXCI7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldE1vZHVsZUluZGV4KCkge1xuICB0cnkge1xuICAgIGxldCBOYW5vTW9kdWxlc0luZGV4ID0gW107XG4gICAgY29uc3QgSVNfUFJPRFVDVElPTiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIjtcbiAgICBpZiAoSVNfUFJPRFVDVElPTikge1xuICAgICAgTmFub01vZHVsZXNJbmRleCA9IGF3YWl0IGltcG9ydChcbiAgICAgICAgLyogd2VicGFja0lnbm9yZTogdHJ1ZSAqL1xuICAgICAgICBOQU5PTU9EVUxFU19VUkxfUFJPRFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgTmFub01vZHVsZXNJbmRleCA9IGF3YWl0IGltcG9ydChcbiAgICAgICAgLyogd2VicGFja0lnbm9yZTogdHJ1ZSAqL1xuICAgICAgICBOQU5PTU9EVUxFU19VUkxfREVWXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gTmFub01vZHVsZXNJbmRleDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICB9XG59XG4iLCIvLyBodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL005Si9uYW5vLW1vZHVsZXMvYWN0aW9ucy93b3JrZmxvd3MvYWN0aW9ucy55bWwvcnVuc1xuXG5leHBvcnQgY29uc3QgQkFER0VTID0ge1xuICBcIm5hbm8tbW9kdWxlc1wiOiB7XG4gICAgYnVpbGQ6XG4gICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9NOUovbmFuby1tb2R1bGVzL2FjdGlvbnMvd29ya2Zsb3dzL2FjdGlvbnMueW1sL2JhZGdlLnN2Z1wiLFxuICAgIGRlcGxveTpcbiAgICAgIFwiaHR0cHM6Ly9naXRodWIuY29tL005Si9uYW5vLW1vZHVsZXMvYWN0aW9ucy93b3JrZmxvd3MvcGFnZXMvcGFnZXMtYnVpbGQtZGVwbG95bWVudC9iYWRnZS5zdmdcIixcbiAgfSxcbiAgXCJuYW5vX21vZHVsZXNcIjoge1xuICAgIGJ1aWxkOlxuICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vTTlKL25hbm9fbW9kdWxlcy9hY3Rpb25zL3dvcmtmbG93cy9hY3Rpb25zLnltbC9iYWRnZS5zdmdcIixcbiAgICBkZXBsb3k6XG4gICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9NOUovbmFub19tb2R1bGVzL2FjdGlvbnMvd29ya2Zsb3dzL3BhZ2VzL3BhZ2VzLWJ1aWxkLWRlcGxveW1lbnQvYmFkZ2Uuc3ZnXCIsXG4gIH0sXG59O1xuXG5jb25zdCBXT1JLRkxPV19BUElfVVJMUyA9IHtcbiAgXCJuYW5vLW1vZHVsZXNcIjoge1xuICAgIGJ1aWxkOlxuICAgICAgXCJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL005Si9uYW5vLW1vZHVsZXMvYWN0aW9ucy93b3JrZmxvd3MvYWN0aW9ucy55bWwvcnVuc1wiLFxuICAgIGRlcGxveTpcbiAgICAgIFwiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy9NOUovbmFuby1tb2R1bGVzL2FjdGlvbnMvd29ya2Zsb3dzL3BhZ2VzL3BhZ2VzLWJ1aWxkLWRlcGxveW1lbnQvcnVuc1wiLFxuICB9LFxuICBuYW5vX21vZHVsZXM6IHtcbiAgICBidWlsZDpcbiAgICAgIFwiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy9NOUovbmFub19tb2R1bGVzL2FjdGlvbnMvd29ya2Zsb3dzL2FjdGlvbnMueW1sL3J1bnNcIixcbiAgICBkZXBsb3k6XG4gICAgICBcImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvTTlKL25hbm9fbW9kdWxlcy9hY3Rpb25zL3dvcmtmbG93cy9wYWdlcy9wYWdlcy1idWlsZC1kZXBsb3ltZW50L3J1bnNcIixcbiAgfSxcbn07XG4iLCJpbXBvcnQgXCIuL25hbm8tbW9kdWxlcy5jc3NcIjtcbmltcG9ydCBOYW5vTW9kdWxlcyBmcm9tIFwiLi9OYW5vTW9kdWxlc1wiO1xuaW1wb3J0IHsgQkFER0VTIH0gZnJvbSBcIi4vZ2l0aHViLWhlbHBlclwiO1xuXG5mdW5jdGlvbiBjb21wb25lbnQoKSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibmFub19tb2R1bGVzX2NvbnRhaW5lclwiKTtcblxuICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHRpdGxlLmNsYXNzTGlzdC5hZGQoXCJuYW5vX21vZHVsZXNfdGl0bGVcIik7XG4gIHRpdGxlLmlubmVySFRNTCA9IFwibmFub19tb2R1bGVzXCI7XG5cbiAgY29uc3QgbW9kdWxlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIG1vZHVsZXMuY2xhc3NMaXN0LmFkZChcIm5hbm9fbW9kdWxlc19tb2R1bGVzXCIpO1xuICBtb2R1bGVzLmlkID0gXCJuYW5vX21vZHVsZXNfbW9kdWxlc1wiO1xuXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aXRsZSk7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChtb2R1bGVzKTtcblxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRm9vdGVyKCkpO1xuICByZXR1cm4gY29udGFpbmVyO1xufVxuXG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbXBvbmVudCgpKTtcblxuY29uc3QgbmFub01vZHVsZXMgPSBhd2FpdCBOYW5vTW9kdWxlcygpO1xuaWYgKG5hbm9Nb2R1bGVzKSB7XG4gIGNvbnN0IG5hbm9Nb2R1bGVzTW9kdWxlQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgXCJuYW5vX21vZHVsZXNfbW9kdWxlc1wiXG4gICk7XG4gIGlmIChuYW5vTW9kdWxlcy5sZW5ndGggPiAwKSBuYW5vTW9kdWxlc01vZHVsZUNvbnRhaW5lci5pbm5lckhUTUwgPSBcIlwiO1xuICBlbHNlXG4gICAgbmFub01vZHVsZXNNb2R1bGVDb250YWluZXIuaW5uZXJIVE1MID1cbiAgICAgIFwiPGRpdiBjbGFzcz0nbmFub19tb2R1bGVzX25vX21vZHVsZXMnPk5vIE1vZHVsZXMgZm91bmQ8L2Rpdj5cIjtcbiAgZm9yIChjb25zdCBbbW9kaWQsIG1vZHVsZV0gb2YgbmFub01vZHVsZXMuZW50cmllcygpKSB7XG4gICAgaWYgKG1vZHVsZSkge1xuICAgICAgbG9hZE1vZHVsZShtb2R1bGUsIG1vZGlkKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGVtcFBsYWNlaG9sZGVyTW9kdWxlTmFtZShtb2R1bGVOYW1lKSB7XG4gIGlmIChtb2R1bGVOYW1lKVxuICAgIHJldHVybiBtb2R1bGVOYW1lXG4gICAgICAudG9TdHJpbmcoKVxuICAgICAgLnJlcGxhY2VBbGwoXCIoKSA9PiBpbXBvcnQoXCIsIFwiXCIpXG4gICAgICAucmVwbGFjZUFsbChcIilcIiwgXCJcIilcbiAgICAgIC5yZXBsYWNlQWxsKCdcIicsIFwiXCIpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkTW9kdWxlKG1vZHVsZSwgbW9kaWQpIHtcbiAgbGV0IG1vZHVsZU5hbWUgPSBnZXRUZW1wUGxhY2Vob2xkZXJNb2R1bGVOYW1lKG1vZHVsZSk7XG4gIGxldCBtb2R1bGVEZXNjcmlwdGlvbiA9IFwiLi4uXCI7XG4gIGxldCBtb2R1bGVQdWxzZSA9IGZhbHNlO1xuICBsZXQgbW9kdWxlVmVyc2lvbiA9IFwiLi4uXCI7XG4gIGxldCBtb2R1bGVPdXRwdXQgPSBcIi4uLlwiO1xuICBjb25zdCB0ZW1wbGF0ZUxvYWRpbmcgPSBidWlsZFRlbXBsYXRlKFxuICAgIG1vZHVsZU5hbWUsXG4gICAgbW9kdWxlRGVzY3JpcHRpb24sXG4gICAgbW9kdWxlVmVyc2lvbixcbiAgICBtb2R1bGVPdXRwdXQsXG4gICAgbW9kaWRcbiAgKTtcbiAgY29uc3QgbmFub01vZHVsZXNNb2R1bGVDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICBcIm5hbm9fbW9kdWxlc19tb2R1bGVzXCJcbiAgKTtcbiAgbmFub01vZHVsZXNNb2R1bGVDb250YWluZXIuaW5uZXJIVE1MICs9IHRlbXBsYXRlTG9hZGluZztcbiAgY29uc3QgbW9kdWxlQ2xhc3MgPSBhd2FpdCBtb2R1bGUoKTtcbiAgY29uc3QgaW5zdGFuY2UgPSBuZXcgbW9kdWxlQ2xhc3MuZGVmYXVsdCgpO1xuICBtb2R1bGVOYW1lID0gaW5zdGFuY2UuTU9EVUxFX05BTUUgPyBpbnN0YW5jZS5NT0RVTEVfTkFNRSA6IFwiLVwiO1xuICBtb2R1bGVEZXNjcmlwdGlvbiA9IGluc3RhbmNlLk1PRFVMRV9ERVNDUklQVElPTlxuICAgID8gaW5zdGFuY2UuTU9EVUxFX0RFU0NSSVBUSU9OXG4gICAgOiBcIi1cIjtcbiAgbW9kdWxlUHVsc2UgPSBpbnN0YW5jZS5NT0RVTEVfUFVMU0UgfHwgZmFsc2U7XG4gIG1vZHVsZVZlcnNpb24gPSBpbnN0YW5jZS5NT0RVTEVfVkVSU0lPTiA/IGluc3RhbmNlLk1PRFVMRV9WRVJTSU9OIDogXCItXCI7XG4gIGlmIChpbnN0YW5jZS5NT0RVTEVfTUFJTiAmJiB0eXBlb2YgaW5zdGFuY2UuTU9EVUxFX01BSU4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBvdXRwdXRNb2RpZmllcnMgPSBjcmVhdGVPdXRwdXRNb2RpZmllcnMobW9kaWQpO1xuICAgICAgbW9kdWxlT3V0cHV0ID0gYXdhaXQgaW5zdGFuY2UuTU9EVUxFX01BSU4ob3V0cHV0TW9kaWZpZXJzKSB8fCBcIlwiO1xuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG1vZHVsZU91dHB1dCA9IGA8ZGl2IGNsYXNzPVwibmFub19tb2R1bGVzX21vZHVsZV9lcnJvclwiPiR7ZXJyb3IuY29kZX06ICR7ZXJyb3IubWVzc2FnZX08L2Rpdj5gO1xuICAgIH1cbiAgfVxuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBuYW5vX21vZHVsZV8ke21vZGlkfV9uYW1lYCkuaW5uZXJIVE1MID0gbW9kdWxlTmFtZTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYG5hbm9fbW9kdWxlXyR7bW9kaWR9X2Rlc2NyaXB0aW9uYCkuaW5uZXJIVE1MID1cbiAgICBtb2R1bGVEZXNjcmlwdGlvbjtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYG5hbm9fbW9kdWxlXyR7bW9kaWR9X3ZlcnNpb25gKS5pbm5lckhUTUwgPVxuICAgIG1vZHVsZVZlcnNpb247XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBuYW5vX21vZHVsZV8ke21vZGlkfV9vdXRwdXRgKS5pbm5lckhUTUwgPVxuICAgIG1vZHVsZU91dHB1dDtcbiAgaWYgKG1vZHVsZVB1bHNlKSB7XG4gICAgZG9jdW1lbnRcbiAgICAgIC5nZXRFbGVtZW50QnlJZChgbmFub19tb2R1bGVfJHttb2RpZH1fcHVsc2VgKVxuICAgICAgLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRUZW1wbGF0ZShuYW1lLCBkZXNjcmlwdGlvbiwgdmVyc2lvbiwgb3V0cHV0LCBtb2RpZCkge1xuICByZXR1cm4gYFxuPGRpdiBjbGFzcz1cIm5hbm9fbW9kdWxlc19tb2R1bGVcIiBpZD1cIm5hbm9fbW9kdWxlXyR7bW9kaWR9XCI+XG4gIDxkaXYgY2xhc3M9XCJuYW5vX21vZHVsZV9uYW1lXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJib2xkXCI+TmFtZTo8L3NwYW4+XG4gICAgPHNwYW4gaWQ9XCJuYW5vX21vZHVsZV8ke21vZGlkfV9uYW1lXCI+JHtuYW1lfTwvc3Bhbj5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJuYW5vX21vZHVsZV9kZXNjcmlwdGlvblwiPlxuICAgIDxzcGFuIGNsYXNzPVwiYm9sZFwiPkRlc2NyaXB0aW9uOjwvc3Bhbj5cbiAgICA8c3BhbiBpZD1cIm5hbm9fbW9kdWxlXyR7bW9kaWR9X2Rlc2NyaXB0aW9uXCI+JHtkZXNjcmlwdGlvbn08L3NwYW4+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibmFub19tb2R1bGVfdmVyc2lvblwiPlxuICAgIDxzcGFuIGNsYXNzPVwiYm9sZFwiPlZlcnNpb246PC9zcGFuPlxuICAgIDxzcGFuIGlkPVwibmFub19tb2R1bGVfJHttb2RpZH1fdmVyc2lvblwiPiR7dmVyc2lvbn0gPC9zcGFuPlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cIm5hbm9fbW9kdWxlX291dHB1dFwiPlxuICAgIDxzcGFuIGNsYXNzPVwiYm9sZFwiPk91dHB1dDo8L3NwYW4+XG4gICAgJm5ic3A7PHNwYW5cbiAgICAgIGNsYXNzPVwicHVsc2UgaGlkZGVuXCJcbiAgICAgIGlkPVwibmFub19tb2R1bGVfJHttb2RpZH1fcHVsc2VcIlxuICAgID48L3NwYW4+XG4gIDwvZGl2PlxuICA8ZGl2XG4gICAgY2xhc3M9XCJuYW5vX21vZHVsZV9vdXRwdXRfcmVzdHJpY3RlZF9zY3JvbGxhYmxlXCJcbiAgICBpZD1cIm5hbm9fbW9kdWxlXyR7bW9kaWR9X291dHB1dFwiXG4gID5cbiAgICAke291dHB1dH1cbiAgPC9kaXY+XG48L2Rpdj5cbmA7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU91dHB1dE1vZGlmaWVycyhtb2RpZCkge1xuICByZXR1cm4ge1xuICAgIHByaW50OiBwcmludChtb2RpZCksXG4gICAgcHJpbnRMaW5lQmVmb3JlOiBwcmludExpbmVCZWZvcmUobW9kaWQpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBwcmludChtb2RpZCkge1xuICByZXR1cm4gKG5ld091dHB1dCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgYG5hbm9fbW9kdWxlXyR7bW9kaWR9X291dHB1dGBcbiAgICApO1xuICAgIG91dHB1dENvbnRhaW5lci5pbm5lckhUTUwgPSBuZXdPdXRwdXQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByaW50TGluZUJlZm9yZShtb2RpZCkge1xuICByZXR1cm4gKG5ld091dHB1dCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgYG5hbm9fbW9kdWxlXyR7bW9kaWR9X291dHB1dGBcbiAgICApO1xuICAgIGNvbnN0IGxvZ0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbG9nQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoYG5hbm9fbW9kdWxlX2xvZ2ApO1xuICAgIGxvZ0NvbnRhaW5lci5pbm5lckhUTUwgPSBuZXdPdXRwdXQ7XG4gICAgb3V0cHV0Q29udGFpbmVyLnByZXBlbmQobG9nQ29udGFpbmVyKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRm9vdGVyKCkge1xuICBjb25zdCBmb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBmb290ZXIuY2xhc3NMaXN0LmFkZChcIm5hbm9fbW9kdWxlc19mb290ZXJcIik7XG5cbiAgZm9vdGVyLmlubmVySFRNTCA9IGBcbiAgPGRpdiBjbGFzcz1cIm5hbm9fbW9kdWxlc19mb290ZXJfcm93XCI+XG4gICAgbmFuby1tb2R1bGVzL2J1aWxkOiA8aW1nIGNsYXNzPVwibmFub19tb2R1bGVzX2Zvb3Rlcl9iYWRnZVwiIHNyYz1cIiR7QkFER0VTW1wibmFuby1tb2R1bGVzXCJdLmJ1aWxkfVwiLz5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJuYW5vX21vZHVsZXNfZm9vdGVyX3Jvd1wiPlxuICAgIG5hbm8tbW9kdWxlcy9kZXBsb3k6IDxpbWcgY2xhc3M9XCJuYW5vX21vZHVsZXNfZm9vdGVyX2JhZGdlXCIgc3JjPVwiJHtCQURHRVNbXCJuYW5vLW1vZHVsZXNcIl0uZGVwbG95fVwiLz5cbiAgPC9kaXY+XG4gIDwhLS0gPGRpdiBjbGFzcz1cIm5hbm9fbW9kdWxlc19mb290ZXJfcm93XCI+XG4gICAgbmFub19tb2R1bGVzL2J1aWxkOiA8aW1nIGNsYXNzPVwibmFub19tb2R1bGVzX2Zvb3Rlcl9iYWRnZVwiIHNyYz1cIiR7QkFER0VTLm5hbm9fbW9kdWxlcy5idWlsZH1cIi8+XG4gIDwvZGl2PiAtLT5cbiAgPGRpdiBjbGFzcz1cIm5hbm9fbW9kdWxlc19mb290ZXJfcm93XCI+XG4gICAgbmFub19tb2R1bGVzL2RlcGxveTogPGltZyBjbGFzcz1cIm5hbm9fbW9kdWxlc19mb290ZXJfYmFkZ2VcIiBzcmM9XCIke0JBREdFUy5uYW5vX21vZHVsZXMuZGVwbG95fVwiLz5cbiAgPC9kaXY+XG4gIGA7XG5cbiAgcmV0dXJuIGZvb3Rlcjtcbn1cbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqLFxuYm9keSB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuYm9keSB7XG4gIGZvbnQtc2l6ZTogMWVtO1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgbGVmdDogMDtcbiAgYmFja2dyb3VuZDogIzAwMDtcbn1cblxuLm5hbm9fbW9kdWxlc19jb250YWluZXIge1xuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwYWRkaW5nOiAwO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG4ubmFub19tb2R1bGVzX3RpdGxlIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbiAgcGFkZGluZzogOHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuICBjb2xvcjogI2ZmZjtcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgdG9wOiAwO1xuICB6LWluZGV4OiAxO1xufVxuXG4ubmFub19tb2R1bGVzX21vZHVsZXMge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heCgzMjBweCwgMWZyKSk7XG4gIGdyaWQtZ2FwOiA4cHg7XG4gIHBhZGRpbmc6IDhweDtcbiAgYmFja2dyb3VuZDogI2VlZTtcbiAgZmxleDogMTtcbiAgZ3JpZC1hdXRvLXJvd3M6IG1heC1jb250ZW50O1xufVxuXG4ubmFub19tb2R1bGVzX21vZHVsZSB7XG4gIGJveC1zaGFkb3c6IDBweCA0cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4yNSk7XG4gIHBhZGRpbmc6IDhweDtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEpO1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xufVxuXG4ubmFub19tb2R1bGVzX25vX21vZHVsZXMge1xuICBwYWRkaW5nOiA4cHg7XG59XG5cbi5uYW5vX21vZHVsZXNfbW9kdWxlX2Vycm9yIHtcbiAgY29sb3I6ICNmMDA7XG59XG5cbi5ib2xkIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbn1cblxuLm5hbm9fbW9kdWxlX291dHB1dCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5cbi5uYW5vX21vZHVsZV9vdXRwdXRfcmVzdHJpY3RlZF9zY3JvbGxhYmxlIHtcbiAgbWF4LWhlaWdodDogMTAwcHg7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4ucHVsc2Uge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDhweDtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBiYWNrZ3JvdW5kOiBncmV5O1xuICBhbmltYXRpb246IHB1bHNlIGVhc2UtaW4tb3V0IDFzIGluZmluaXRlO1xufVxuXG4uaGlkZGVuIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLm5hbm9fbW9kdWxlc19mb290ZXIge1xuICBiYWNrZ3JvdW5kOiAjMDAwO1xuICBjb2xvcjogI2ZmZjtcbiAgcGFkZGluZzogOHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDhweDtcbiAgZmxleC13cmFwOiB3cmFwO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxuLm5hbm9fbW9kdWxlc19mb290ZXJfcm93IHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xufVxuXG4ubmFub19tb2R1bGVzX2Zvb3Rlcl9iYWRnZSB7XG4gIG1hcmdpbi1sZWZ0OiA4cHg7XG4gIG1heC1oZWlnaHQ6IDE2cHg7XG59XG5cbkBrZXlmcmFtZXMgcHVsc2F0aW5nIHtcbiAgMCUge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbiAgMTAwJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxufVxuXG5Aa2V5ZnJhbWVzIHB1bHNlIHtcbiAgMCUge1xuICAgIGJhY2tncm91bmQ6IHNpbHZlcjtcbiAgfVxuICAyNSUge1xuICAgIGJhY2tncm91bmQ6IGdyZWVueWVsbG93O1xuICB9XG4gIDUwJSB7XG4gICAgYmFja2dyb3VuZDogc2lsdmVyO1xuICB9XG4gIDc1JSB7XG4gICAgYmFja2dyb3VuZDogZ29sZGVucm9kO1xuICB9XG4gIDEwMCUge1xuICAgIGJhY2tncm91bmQ6IHNpbHZlcjtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvbmFuby1tb2R1bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7RUFFRSxTQUFTO0VBQ1QsVUFBVTtBQUNaOztBQUVBO0VBQ0UsY0FBYztFQUNkLHNCQUFzQjtFQUN0QixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFdBQVc7RUFDWCxZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLE1BQU07RUFDTixRQUFRO0VBQ1IsU0FBUztFQUNULE9BQU87RUFDUCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxPQUFPO0VBQ1AsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixVQUFVO0VBQ1Ysc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLFlBQVk7RUFDWixzQkFBc0I7RUFDdEIsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixNQUFNO0VBQ04sVUFBVTtBQUNaOztBQUVBO0VBQ0UsYUFBYTtFQUNiLDREQUE0RDtFQUM1RCxhQUFhO0VBQ2IsWUFBWTtFQUNaLGdCQUFnQjtFQUNoQixPQUFPO0VBQ1AsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0UsMkNBQTJDO0VBQzNDLFlBQVk7RUFDWixvQ0FBb0M7RUFDcEMsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxpQkFBaUI7RUFDakIsY0FBYztBQUNoQjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixXQUFXO0VBQ1gsV0FBVztFQUNYLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFdBQVc7RUFDWCxZQUFZO0VBQ1osYUFBYTtFQUNiLFFBQVE7RUFDUixlQUFlO0VBQ2YsdUJBQXVCO0FBQ3pCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQiwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0U7SUFDRSxVQUFVO0VBQ1o7RUFDQTtJQUNFLFVBQVU7RUFDWjtBQUNGOztBQUVBO0VBQ0U7SUFDRSxrQkFBa0I7RUFDcEI7RUFDQTtJQUNFLHVCQUF1QjtFQUN6QjtFQUNBO0lBQ0Usa0JBQWtCO0VBQ3BCO0VBQ0E7SUFDRSxxQkFBcUI7RUFDdkI7RUFDQTtJQUNFLGtCQUFrQjtFQUNwQjtBQUNGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiosXFxuYm9keSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGZvbnQtc2l6ZTogMWVtO1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIGxlZnQ6IDA7XFxuICBiYWNrZ3JvdW5kOiAjMDAwO1xcbn1cXG5cXG4ubmFub19tb2R1bGVzX2NvbnRhaW5lciB7XFxuICBmbGV4OiAxO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBwYWRkaW5nOiAwO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLm5hbm9fbW9kdWxlc190aXRsZSB7XFxuICBmb250LXdlaWdodDogYm9sZGVyO1xcbiAgcGFkZGluZzogOHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgcG9zaXRpb246IHN0aWNreTtcXG4gIHRvcDogMDtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbi5uYW5vX21vZHVsZXNfbW9kdWxlcyB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maWxsLCBtaW5tYXgoMzIwcHgsIDFmcikpO1xcbiAgZ3JpZC1nYXA6IDhweDtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIGJhY2tncm91bmQ6ICNlZWU7XFxuICBmbGV4OiAxO1xcbiAgZ3JpZC1hdXRvLXJvd3M6IG1heC1jb250ZW50O1xcbn1cXG5cXG4ubmFub19tb2R1bGVzX21vZHVsZSB7XFxuICBib3gtc2hhZG93OiAwcHggNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbiAgcGFkZGluZzogOHB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEpO1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG59XFxuXFxuLm5hbm9fbW9kdWxlc19ub19tb2R1bGVzIHtcXG4gIHBhZGRpbmc6IDhweDtcXG59XFxuXFxuLm5hbm9fbW9kdWxlc19tb2R1bGVfZXJyb3Ige1xcbiAgY29sb3I6ICNmMDA7XFxufVxcblxcbi5ib2xkIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XFxufVxcblxcbi5uYW5vX21vZHVsZV9vdXRwdXQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubmFub19tb2R1bGVfb3V0cHV0X3Jlc3RyaWN0ZWRfc2Nyb2xsYWJsZSB7XFxuICBtYXgtaGVpZ2h0OiAxMDBweDtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbn1cXG5cXG4ucHVsc2Uge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDE2cHg7XFxuICBoZWlnaHQ6IDhweDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGJhY2tncm91bmQ6IGdyZXk7XFxuICBhbmltYXRpb246IHB1bHNlIGVhc2UtaW4tb3V0IDFzIGluZmluaXRlO1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5uYW5vX21vZHVsZXNfZm9vdGVyIHtcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBnYXA6IDhweDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4ubmFub19tb2R1bGVzX2Zvb3Rlcl9yb3cge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxufVxcblxcbi5uYW5vX21vZHVsZXNfZm9vdGVyX2JhZGdlIHtcXG4gIG1hcmdpbi1sZWZ0OiA4cHg7XFxuICBtYXgtaGVpZ2h0OiAxNnB4O1xcbn1cXG5cXG5Aa2V5ZnJhbWVzIHB1bHNhdGluZyB7XFxuICAwJSB7XFxuICAgIG9wYWNpdHk6IDA7XFxuICB9XFxuICAxMDAlIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gIH1cXG59XFxuXFxuQGtleWZyYW1lcyBwdWxzZSB7XFxuICAwJSB7XFxuICAgIGJhY2tncm91bmQ6IHNpbHZlcjtcXG4gIH1cXG4gIDI1JSB7XFxuICAgIGJhY2tncm91bmQ6IGdyZWVueWVsbG93O1xcbiAgfVxcbiAgNTAlIHtcXG4gICAgYmFja2dyb3VuZDogc2lsdmVyO1xcbiAgfVxcbiAgNzUlIHtcXG4gICAgYmFja2dyb3VuZDogZ29sZGVucm9kO1xcbiAgfVxcbiAgMTAwJSB7XFxuICAgIGJhY2tncm91bmQ6IHNpbHZlcjtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9uYW5vLW1vZHVsZXMuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbmFuby1tb2R1bGVzLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJpZCIsIl9rIiwicHVzaCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJhc3luYyIsImNvbnNvbGUiLCJsb2ciLCJOQU5PTU9EVUxFUyIsIk1PRFVMRV9JTkRFWCIsIk5hbm9Nb2R1bGVzSW5kZXgiLCJpbXBvcnQiLCJOQU5PTU9EVUxFU19VUkxfUFJPRCIsImUiLCJnZXRNb2R1bGVJbmRleCIsIk1PRFVMRVMiLCJkZWZhdWx0IiwiQXJyYXkiLCJpc0FycmF5IiwiTU9EVUxFIiwiY29kZSIsIm1lc3NhZ2UiLCJCQURHRVMiLCJidWlsZCIsImRlcGxveSIsImNvbXBvbmVudCIsImNvbnRhaW5lciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInRpdGxlIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVGb290ZXIiLCJib2R5IiwibmFub01vZHVsZXMiLCJOYW5vTW9kdWxlcyIsIm5hbm9Nb2R1bGVzTW9kdWxlQ29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJtb2RpZCIsImVudHJpZXMiLCJsb2FkTW9kdWxlIiwiZ2V0VGVtcFBsYWNlaG9sZGVyTW9kdWxlTmFtZSIsIm1vZHVsZU5hbWUiLCJyZXBsYWNlQWxsIiwibW9kdWxlRGVzY3JpcHRpb24iLCJtb2R1bGVQdWxzZSIsIm1vZHVsZVZlcnNpb24iLCJtb2R1bGVPdXRwdXQiLCJ0ZW1wbGF0ZUxvYWRpbmciLCJidWlsZFRlbXBsYXRlIiwiaW5zdGFuY2UiLCJNT0RVTEVfTkFNRSIsIk1PRFVMRV9ERVNDUklQVElPTiIsIk1PRFVMRV9QVUxTRSIsIk1PRFVMRV9WRVJTSU9OIiwiTU9EVUxFX01BSU4iLCJvdXRwdXRNb2RpZmllcnMiLCJjcmVhdGVPdXRwdXRNb2RpZmllcnMiLCJlcnJvciIsInJlbW92ZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInZlcnNpb24iLCJvdXRwdXQiLCJwcmludCIsInByaW50TGluZUJlZm9yZSIsIm5ld091dHB1dCIsIm91dHB1dENvbnRhaW5lciIsImxvZ0NvbnRhaW5lciIsInByZXBlbmQiLCJmb290ZXIiLCJuYW5vX21vZHVsZXMiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIm9wdGlvbnMiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJsb2NhbHMiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwidXBkYXRlIiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJFcnJvciIsImVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==