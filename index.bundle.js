"use strict";(self.webpackChunknano_modules=self.webpackChunknano_modules||[]).push([[57,896],{89:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var o="",t=void 0!==e[5];return e[4]&&(o+="@supports (".concat(e[4],") {")),e[2]&&(o+="@media ".concat(e[2]," {")),t&&(o+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),o+=n(e),t&&(o+="}"),e[2]&&(o+="}"),e[4]&&(o+="}"),o})).join("")},e.i=function(n,o,t,a,i){"string"==typeof n&&(n=[[null,n,void 0]]);var A={};if(t)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(A[d]=!0)}for(var r=0;r<n.length;r++){var l=[].concat(n[r]);t&&A[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),o&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=o):l[2]=o),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},963:n=>{n.exports=function(n){var e=n[1],o=n[3];if(!o)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(a," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},70:(n,e,o)=>{async function t(){console.log("> Nanomod.js _");const n=[];try{const e=await async function(){try{let n=[];return n=await import(a),n}catch(n){console.log(n)}}();if(e){const o=e.default;if(Array.isArray(o)&&o.length>0)for(const e of o)n.push(e)}}catch(n){const{code:e,message:o}=n;console.log(`${e}: ${o}`)}return n}o.d(e,{A:()=>t});const a="https://M9J.github.io/nano_modules/index.js"},651:(n,e,o)=>{},731:(n,e,o)=>{o.a(n,(async(n,e)=>{try{o(508);var t=o(70);function a(){const n=document.createElement("div");n.classList.add("nano_modules_container");const e=document.createElement("div");e.classList.add("nano_modules_title"),e.innerHTML="nano_modules";const o=document.createElement("div");return o.classList.add("nano_modules_modules"),o.id="nano_modules_modules",n.appendChild(e),n.appendChild(o),n.appendChild(g()),n}o(651),document.body.appendChild(a());const i=await(0,t.A)();if(i){const f=document.getElementById("nano_modules_modules");i.length>0?f.innerHTML="":f.innerHTML="<div class='nano_modules_no_modules'>No Modules found</div>";for(const[E,C]of i.entries())C&&s(C,E)}function A(n){if(n)return n.toString().replaceAll("() => import(","").replaceAll(")","").replaceAll('"',"")}async function s(n,e){let o=A(n),t="...",a=!1,i="...";const s=d(o,t,i,"",e);document.getElementById("nano_modules_modules").innerHTML+=s;const c=new((await n()).default);o=c.MODULE_NAME?c.MODULE_NAME:"-",t=c.MODULE_DESCRIPTION?c.MODULE_DESCRIPTION:"-",a=c.MODULE_PULSE||!1,i=c.MODULE_VERSION?c.MODULE_VERSION:"-";const u=c.MODULE_MAIL_ID||null,p=c.MODULE_MAIL_HANDLER||null;if(c.MODULE_OUTPUT=l(e),u&&p&&(r.onReceive(u,p),c.MODULE_MAIL={send:r.send}),c.MODULE_MAIN&&"function"==typeof c.MODULE_MAIN)try{await c.MODULE_MAIN()}catch(n){c.MODULE_OUTPUT.print(`ERROR: ${n.code}: ${n.message}`)}document.getElementById(`nano_module_${e}_name`).innerHTML=o,document.getElementById(`nano_module_${e}_description`).innerHTML=t,document.getElementById(`nano_module_${e}_version`).innerHTML=i,a&&document.getElementById(`nano_module_${e}_pulse`).classList.remove("hidden")}function d(n,e,o,t,a){return`\n<div class="nano_modules_module" id="nano_module_${a}">\n  <div class="nano_module_name">\n    <span class="bold">Name:</span>\n    <span id="nano_module_${a}_name">${n}</span>\n  </div>\n  <div class="nano_module_description">\n    <span class="bold">Description:</span>\n    <span id="nano_module_${a}_description">${e}</span>\n  </div>\n  <div class="nano_module_output">\n    <span class="bold">Output:</span>\n    &nbsp;<span\n      class="pulse hidden"\n      id="nano_module_${a}_pulse"\n    ></span><span class="expander">&nbsp;</span>\n    <span class="bold">Version:</span>\n    <span id="nano_module_${a}_version">${o} </span>\n  </div>\n  <div\n    class="nano_module_output_restricted_scrollable"\n    id="nano_module_${a}_output"\n  >\n    ${t}\n  </div>\n</div>\n`}const r=m();function l(n){return{print:c(n),printLine:u(n)}}function c(n){return e=>{document.getElementById(`nano_module_${n}_output`).innerHTML=e}}function u(n){return e=>{const o=document.getElementById(`nano_module_${n}_output`),t=document.createElement("div");t.classList.add("nano_module_log"),t.innerHTML=e,o.prepend(t)}}const p=10;function m(){const n={};return{onReceive:(e,o)=>{n[e]||(n[e]=o)},send:e=>{let o=setTimeout((()=>{clearTimeout(o),n[e.to]?n[e.to](e):console.log(`Recipient not found: ${e.to}`)}),p)}}}function g(){const n=document.createElement("div");return n.classList.add("nano_modules_footer"),n.innerHTML='\n<div class="nano_modules_footer_row">\n  <a class="github-badge" href="https://github.com/m9j/nano-modules/actions">\n    <div class="github-badge-label">nano-modules</div>\n    <div class="github-badge-stage">ACTIONS</div>\n    <div class="github-badge-status">PASSED</div>\n  </a>\n</div>\n<div class="nano_modules_footer_row">\n  <a class="github-badge" href="https://github.com/m9j/nano_modules/actions">\n    <div class="github-badge-label">nano_modules</div>\n    <div class="github-badge-stage">ACTIONS</div>\n    <div class="github-badge-status">PASSED</div>\n  </a>\n</div>\n  ',n}e()}catch(_){e(_)}}),1)},497:(n,e,o)=>{o.d(e,{A:()=>s});var t=o(963),a=o.n(t),i=o(89),A=o.n(i)()(a());A.push([n.id,"*,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 1em;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: #000;\n}\n\n.nano_modules_container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.nano_modules_title {\n  font-weight: bolder;\n  padding: 8px;\n  background-color: #000;\n  color: #fff;\n  position: sticky;\n  top: 0;\n  z-index: 1;\n}\n\n.nano_modules_modules {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 8px;\n  padding: 8px;\n  background: #eee;\n  flex: 1;\n  grid-auto-rows: max-content;\n}\n\n.nano_modules_module {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);\n  padding: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background: #fff;\n}\n\n.nano_modules_no_modules {\n  padding: 8px;\n}\n\n.nano_modules_module_error {\n  color: #f00;\n}\n\n.bold {\n  font-weight: bolder;\n}\n\n.nano_module_output {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.nano_module_output_restricted_scrollable {\n  max-height: 93px;\n  overflow: auto;\n}\n\n.pulse {\n  display: inline-block;\n  width: 16px;\n  height: 8px;\n  border-radius: 8px;\n  background: grey;\n  animation: pulse ease-in-out 1s infinite;\n}\n\n.hidden {\n  display: none;\n}\n\n.expander {\n  display: inline-block;\n  width: 100%;\n}\n\n.nano_modules_footer {\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.nano_modules_footer_row {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nano_modules_footer_badge {\n  margin-left: 8px;\n  max-height: 16px;\n}\n\n.github-badge {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 0px;\n  overflow: hidden;\n  border: 1px solid #333;\n  text-decoration: none;\n  color: #fff;\n}\n\n.github-badge-label {\n  padding: 4px 8px;\n  background-color: #222;\n}\n\n.github-badge-stage {\n  padding: 4px 8px;\n  background-color: #333;\n}\n\n.github-badge-status {\n  padding: 4px 8px;\n  background-color: green;\n}\n\n@keyframes pulsating {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes pulse {\n  0% {\n    background: silver;\n  }\n  25% {\n    background: greenyellow;\n  }\n  50% {\n    background: silver;\n  }\n  75% {\n    background: goldenrod;\n  }\n  100% {\n    background: silver;\n  }\n}\n","",{version:3,sources:["webpack://./src/nano-modules.css"],names:[],mappings:"AAAA;;EAEE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,cAAc;EACd,sBAAsB;EACtB,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;EACP,gBAAgB;AAClB;;AAEA;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,sBAAsB;EACtB,WAAW;EACX,gBAAgB;EAChB,MAAM;EACN,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,4DAA4D;EAC5D,aAAa;EACb,YAAY;EACZ,gBAAgB;EAChB,OAAO;EACP,2BAA2B;AAC7B;;AAEA;EACE,2CAA2C;EAC3C,YAAY;EACZ,oCAAoC;EACpC,gBAAgB;AAClB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,gBAAgB;EAChB,wCAAwC;AAC1C;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,YAAY;EACZ,aAAa;EACb,QAAQ;EACR,eAAe;EACf,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,2BAA2B;AAC7B;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,kBAAkB;EAClB,gBAAgB;EAChB,sBAAsB;EACtB,qBAAqB;EACrB,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;AACF;;AAEA;EACE;IACE,kBAAkB;EACpB;EACA;IACE,uBAAuB;EACzB;EACA;IACE,kBAAkB;EACpB;EACA;IACE,qBAAqB;EACvB;EACA;IACE,kBAAkB;EACpB;AACF",sourcesContent:["*,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 1em;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: #000;\n}\n\n.nano_modules_container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.nano_modules_title {\n  font-weight: bolder;\n  padding: 8px;\n  background-color: #000;\n  color: #fff;\n  position: sticky;\n  top: 0;\n  z-index: 1;\n}\n\n.nano_modules_modules {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 8px;\n  padding: 8px;\n  background: #eee;\n  flex: 1;\n  grid-auto-rows: max-content;\n}\n\n.nano_modules_module {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);\n  padding: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background: #fff;\n}\n\n.nano_modules_no_modules {\n  padding: 8px;\n}\n\n.nano_modules_module_error {\n  color: #f00;\n}\n\n.bold {\n  font-weight: bolder;\n}\n\n.nano_module_output {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.nano_module_output_restricted_scrollable {\n  max-height: 93px;\n  overflow: auto;\n}\n\n.pulse {\n  display: inline-block;\n  width: 16px;\n  height: 8px;\n  border-radius: 8px;\n  background: grey;\n  animation: pulse ease-in-out 1s infinite;\n}\n\n.hidden {\n  display: none;\n}\n\n.expander {\n  display: inline-block;\n  width: 100%;\n}\n\n.nano_modules_footer {\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.nano_modules_footer_row {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nano_modules_footer_badge {\n  margin-left: 8px;\n  max-height: 16px;\n}\n\n.github-badge {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 0px;\n  overflow: hidden;\n  border: 1px solid #333;\n  text-decoration: none;\n  color: #fff;\n}\n\n.github-badge-label {\n  padding: 4px 8px;\n  background-color: #222;\n}\n\n.github-badge-stage {\n  padding: 4px 8px;\n  background-color: #333;\n}\n\n.github-badge-status {\n  padding: 4px 8px;\n  background-color: green;\n}\n\n@keyframes pulsating {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes pulse {\n  0% {\n    background: silver;\n  }\n  25% {\n    background: greenyellow;\n  }\n  50% {\n    background: silver;\n  }\n  75% {\n    background: goldenrod;\n  }\n  100% {\n    background: silver;\n  }\n}\n"],sourceRoot:""}]);const s=A},508:(n,e,o)=>{var t=o(72),a=o.n(t),i=o(825),A=o.n(i),s=o(659),d=o.n(s),r=o(56),l=o.n(r),c=o(540),u=o.n(c),p=o(113),m=o.n(p),g=o(497),f={};f.styleTagTransform=m(),f.setAttributes=l(),f.insert=d().bind(null,"head"),f.domAPI=A(),f.insertStyleElement=u(),a()(g.A,f),g.A&&g.A.locals&&g.A.locals},72:n=>{var e=[];function o(n){for(var o=-1,t=0;t<e.length;t++)if(e[t].identifier===n){o=t;break}return o}function t(n,t){for(var i={},A=[],s=0;s<n.length;s++){var d=n[s],r=t.base?d[0]+t.base:d[0],l=i[r]||0,c="".concat(r," ").concat(l);i[r]=l+1;var u=o(c),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=a(p,t);t.byIndex=s,e.splice(s,0,{identifier:c,updater:m,references:1})}A.push(c)}return A}function a(n,e){var o=e.domAPI(e);return o.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;o.update(n=e)}else o.remove()}}n.exports=function(n,a){var i=t(n=n||[],a=a||{});return function(n){n=n||[];for(var A=0;A<i.length;A++){var s=o(i[A]);e[s].references--}for(var d=t(n,a),r=0;r<i.length;r++){var l=o(i[r]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=d}}},659:n=>{var e={};n.exports=function(n,o){var t=function(n){if(void 0===e[n]){var o=document.querySelector(n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(n){o=null}e[n]=o}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(o)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,o)=>{n.exports=function(n){var e=o.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(o){!function(n,e,o){var t="";o.supports&&(t+="@supports (".concat(o.supports,") {")),o.media&&(t+="@media ".concat(o.media," {"));var a=void 0!==o.layer;a&&(t+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),t+=o.css,a&&(t+="}"),o.media&&(t+="}"),o.supports&&(t+="}");var i=o.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,o)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},n=>{n(n.s=731)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QlQsSUFDRjZILEdBQU8sU0FBUzVILE9BQU8ySCxFQUFJbkgsTUFBTVAsT0FBUyxFQUFJLElBQUlELE9BQU8ySCxFQUFJbkgsT0FBUyxHQUFJLE9BRTVFb0gsR0FBT0QsRUFBSUMsSUFDUDdILElBQ0Y2SCxHQUFPLEtBRUxELEVBQUl0SCxRQUNOdUgsR0FBTyxLQUVMRCxFQUFJcEgsV0FDTnFILEdBQU8sS0FFVCxJQUFJQyxFQUFZRixFQUFJRSxVQUNoQkEsR0FBNkIsb0JBQVQ3RyxPQUN0QjRHLEdBQU8sdURBQXVENUgsT0FBT2dCLEtBQUtFLFNBQVNDLG1CQUFtQkMsS0FBS0MsVUFBVXdHLE1BQWUsUUFLdEluQixFQUFRQyxrQkFBa0JpQixFQUFLNkIsRUFBYy9DLEVBQVFBLFFBQ3ZELENBb0JNa0QsQ0FBTUgsRUFBYy9DLEVBQVNpQixFQUMvQixFQUNBdEMsT0FBUSxZQXJCWixTQUE0Qm9FLEdBRTFCLEdBQWdDLE9BQTVCQSxFQUFhSSxXQUNmLE9BQU8sRUFFVEosRUFBYUksV0FBV0MsWUFBWUwsRUFDdEMsQ0FnQk1NLENBQW1CTixFQUNyQixFQUVKLEMsVUM5Q0FuSyxFQUFPQyxRQVZQLFNBQTJCcUksRUFBSzZCLEdBQzlCLEdBQUlBLEVBQWFPLFdBQ2ZQLEVBQWFPLFdBQVdDLFFBQVVyQyxNQUM3QixDQUNMLEtBQU82QixFQUFhUyxZQUNsQlQsRUFBYUssWUFBWUwsRUFBYVMsWUFFeENULEVBQWF4RyxZQUFZTixTQUFTd0gsZUFBZXZDLEdBQ25ELENBQ0YsQyIsInNvdXJjZXMiOlsid2VicGFjazovL25hbm8tbW9kdWxlcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vc3JjL05hbm9Nb2R1bGVzLmpzIiwid2VicGFjazovL25hbm8tbW9kdWxlcy8uL3NyYy9uYW5vLW1vZHVsZXMuanMiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vc3JjL25hbm8tbW9kdWxlcy5jc3MiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vc3JjL25hbm8tbW9kdWxlcy5jc3M/MzAxZCIsIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL25hbm8tbW9kdWxlcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL25hbm8tbW9kdWxlcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnNvbGUubG9nKFwiPiBOYW5vbW9kLmpzIF9cIik7XG4gIGNvbnN0IE5BTk9NT0RVTEVTID0gW107XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBNT0RVTEVfSU5ERVggPSBhd2FpdCBnZXRNb2R1bGVJbmRleCgpO1xuICAgIGlmIChNT0RVTEVfSU5ERVgpIHtcbiAgICAgIGNvbnN0IE1PRFVMRVMgPSBNT0RVTEVfSU5ERVguZGVmYXVsdDtcbiAgICAgIGNvbnN0IGhhc01vZHVsZXMgPSBBcnJheS5pc0FycmF5KE1PRFVMRVMpID8gTU9EVUxFUy5sZW5ndGggPiAwIDogZmFsc2U7XG4gICAgICBpZiAoaGFzTW9kdWxlcykge1xuICAgICAgICBmb3IgKGNvbnN0IE1PRFVMRSBvZiBNT0RVTEVTKSB7XG4gICAgICAgICAgTkFOT01PRFVMRVMucHVzaChNT0RVTEUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc3QgeyBjb2RlLCBtZXNzYWdlIH0gPSBlO1xuICAgIGNvbnNvbGUubG9nKGAke2NvZGV9OiAke21lc3NhZ2V9YCk7XG4gIH1cblxuICByZXR1cm4gTkFOT01PRFVMRVM7XG59XG5cbmNvbnN0IE5BTk9NT0RVTEVTX1VSTF9ERVYgPSBcIi4vbmFub19tb2R1bGVzL2luZGV4LmpzXCI7XG5jb25zdCBOQU5PTU9EVUxFU19VUkxfUFJPRCA9IFwiaHR0cHM6Ly9NOUouZ2l0aHViLmlvL25hbm9fbW9kdWxlcy9pbmRleC5qc1wiO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRNb2R1bGVJbmRleCgpIHtcbiAgdHJ5IHtcbiAgICBsZXQgTmFub01vZHVsZXNJbmRleCA9IFtdO1xuICAgIGNvbnN0IElTX1BST0RVQ1RJT04gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCI7XG4gICAgaWYgKElTX1BST0RVQ1RJT04pIHtcbiAgICAgIE5hbm9Nb2R1bGVzSW5kZXggPSBhd2FpdCBpbXBvcnQoXG4gICAgICAgIC8qIHdlYnBhY2tJZ25vcmU6IHRydWUgKi9cbiAgICAgICAgTkFOT01PRFVMRVNfVVJMX1BST0RcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE5hbm9Nb2R1bGVzSW5kZXggPSBhd2FpdCBpbXBvcnQoXG4gICAgICAgIC8qIHdlYnBhY2tJZ25vcmU6IHRydWUgKi9cbiAgICAgICAgTkFOT01PRFVMRVNfVVJMX0RFVlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIE5hbm9Nb2R1bGVzSW5kZXg7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgfVxufVxuIiwiaW1wb3J0IFwiLi9uYW5vLW1vZHVsZXMuY3NzXCI7XG5pbXBvcnQgTmFub01vZHVsZXMgZnJvbSBcIi4vTmFub01vZHVsZXNcIjtcbmltcG9ydCB7IEJBREdFUyB9IGZyb20gXCIuL2dpdGh1Yi1oZWxwZXJcIjtcblxuZnVuY3Rpb24gY29tcG9uZW50KCkge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm5hbm9fbW9kdWxlc19jb250YWluZXJcIik7XG5cbiAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICB0aXRsZS5jbGFzc0xpc3QuYWRkKFwibmFub19tb2R1bGVzX3RpdGxlXCIpO1xuICB0aXRsZS5pbm5lckhUTUwgPSBcIm5hbm9fbW9kdWxlc1wiO1xuXG4gIGNvbnN0IG1vZHVsZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBtb2R1bGVzLmNsYXNzTGlzdC5hZGQoXCJuYW5vX21vZHVsZXNfbW9kdWxlc1wiKTtcbiAgbW9kdWxlcy5pZCA9IFwibmFub19tb2R1bGVzX21vZHVsZXNcIjtcblxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQodGl0bGUpO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQobW9kdWxlcyk7XG5cbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvb3RlcigpKTtcbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cblxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb21wb25lbnQoKSk7XG5cbmNvbnN0IG5hbm9Nb2R1bGVzID0gYXdhaXQgTmFub01vZHVsZXMoKTtcbmlmIChuYW5vTW9kdWxlcykge1xuICBjb25zdCBuYW5vTW9kdWxlc01vZHVsZUNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgIFwibmFub19tb2R1bGVzX21vZHVsZXNcIlxuICApO1xuICBpZiAobmFub01vZHVsZXMubGVuZ3RoID4gMCkgbmFub01vZHVsZXNNb2R1bGVDb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcbiAgZWxzZVxuICAgIG5hbm9Nb2R1bGVzTW9kdWxlQ29udGFpbmVyLmlubmVySFRNTCA9XG4gICAgICBcIjxkaXYgY2xhc3M9J25hbm9fbW9kdWxlc19ub19tb2R1bGVzJz5ObyBNb2R1bGVzIGZvdW5kPC9kaXY+XCI7XG4gIGZvciAoY29uc3QgW21vZGlkLCBtb2R1bGVdIG9mIG5hbm9Nb2R1bGVzLmVudHJpZXMoKSkge1xuICAgIGlmIChtb2R1bGUpIHtcbiAgICAgIGxvYWRNb2R1bGUobW9kdWxlLCBtb2RpZCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRlbXBQbGFjZWhvbGRlck1vZHVsZU5hbWUobW9kdWxlTmFtZSkge1xuICBpZiAobW9kdWxlTmFtZSlcbiAgICByZXR1cm4gbW9kdWxlTmFtZVxuICAgICAgLnRvU3RyaW5nKClcbiAgICAgIC5yZXBsYWNlQWxsKFwiKCkgPT4gaW1wb3J0KFwiLCBcIlwiKVxuICAgICAgLnJlcGxhY2VBbGwoXCIpXCIsIFwiXCIpXG4gICAgICAucmVwbGFjZUFsbCgnXCInLCBcIlwiKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZE1vZHVsZShtb2R1bGUsIG1vZGlkKSB7XG4gIGxldCBtb2R1bGVOYW1lID0gZ2V0VGVtcFBsYWNlaG9sZGVyTW9kdWxlTmFtZShtb2R1bGUpO1xuICBsZXQgbW9kdWxlRGVzY3JpcHRpb24gPSBcIi4uLlwiO1xuICBsZXQgbW9kdWxlUHVsc2UgPSBmYWxzZTtcbiAgbGV0IG1vZHVsZVZlcnNpb24gPSBcIi4uLlwiO1xuICBsZXQgbW9kdWxlT3V0cHV0ID0gXCJcIjtcbiAgY29uc3QgdGVtcGxhdGVMb2FkaW5nID0gYnVpbGRUZW1wbGF0ZShcbiAgICBtb2R1bGVOYW1lLFxuICAgIG1vZHVsZURlc2NyaXB0aW9uLFxuICAgIG1vZHVsZVZlcnNpb24sXG4gICAgbW9kdWxlT3V0cHV0LFxuICAgIG1vZGlkXG4gICk7XG4gIGNvbnN0IG5hbm9Nb2R1bGVzTW9kdWxlQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgXCJuYW5vX21vZHVsZXNfbW9kdWxlc1wiXG4gICk7XG4gIG5hbm9Nb2R1bGVzTW9kdWxlQ29udGFpbmVyLmlubmVySFRNTCArPSB0ZW1wbGF0ZUxvYWRpbmc7XG4gIGNvbnN0IG1vZHVsZUNsYXNzID0gYXdhaXQgbW9kdWxlKCk7XG4gIGNvbnN0IGluc3RhbmNlID0gbmV3IG1vZHVsZUNsYXNzLmRlZmF1bHQoKTtcbiAgbW9kdWxlTmFtZSA9IGluc3RhbmNlLk1PRFVMRV9OQU1FID8gaW5zdGFuY2UuTU9EVUxFX05BTUUgOiBcIi1cIjtcbiAgbW9kdWxlRGVzY3JpcHRpb24gPSBpbnN0YW5jZS5NT0RVTEVfREVTQ1JJUFRJT05cbiAgICA/IGluc3RhbmNlLk1PRFVMRV9ERVNDUklQVElPTlxuICAgIDogXCItXCI7XG4gIG1vZHVsZVB1bHNlID0gaW5zdGFuY2UuTU9EVUxFX1BVTFNFIHx8IGZhbHNlO1xuICBtb2R1bGVWZXJzaW9uID0gaW5zdGFuY2UuTU9EVUxFX1ZFUlNJT04gPyBpbnN0YW5jZS5NT0RVTEVfVkVSU0lPTiA6IFwiLVwiO1xuICBjb25zdCBtb2R1bGVNYWlsSWQgPSBpbnN0YW5jZS5NT0RVTEVfTUFJTF9JRCB8fCBudWxsO1xuICBjb25zdCBtb2R1bGVNYWlsSGFuZGxlciA9IGluc3RhbmNlLk1PRFVMRV9NQUlMX0hBTkRMRVIgfHwgbnVsbDtcbiAgaW5zdGFuY2UuTU9EVUxFX09VVFBVVCA9IGNyZWF0ZU91dHB1dE1vZGlmaWVycyhtb2RpZCk7XG4gIGlmIChtb2R1bGVNYWlsSWQgJiYgbW9kdWxlTWFpbEhhbmRsZXIpIHtcbiAgICBtYWlsLm9uUmVjZWl2ZShtb2R1bGVNYWlsSWQsIG1vZHVsZU1haWxIYW5kbGVyKTtcbiAgICBpbnN0YW5jZS5NT0RVTEVfTUFJTCA9IHsgc2VuZDogbWFpbC5zZW5kIH07XG4gIH1cbiAgaWYgKGluc3RhbmNlLk1PRFVMRV9NQUlOICYmIHR5cGVvZiBpbnN0YW5jZS5NT0RVTEVfTUFJTiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGluc3RhbmNlLk1PRFVMRV9NQUlOKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGluc3RhbmNlLk1PRFVMRV9PVVRQVVQucHJpbnQoYEVSUk9SOiAke2Vycm9yLmNvZGV9OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYG5hbm9fbW9kdWxlXyR7bW9kaWR9X25hbWVgKS5pbm5lckhUTUwgPSBtb2R1bGVOYW1lO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgbmFub19tb2R1bGVfJHttb2RpZH1fZGVzY3JpcHRpb25gKS5pbm5lckhUTUwgPVxuICAgIG1vZHVsZURlc2NyaXB0aW9uO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgbmFub19tb2R1bGVfJHttb2RpZH1fdmVyc2lvbmApLmlubmVySFRNTCA9XG4gICAgbW9kdWxlVmVyc2lvbjtcbiAgaWYgKG1vZHVsZVB1bHNlKSB7XG4gICAgZG9jdW1lbnRcbiAgICAgIC5nZXRFbGVtZW50QnlJZChgbmFub19tb2R1bGVfJHttb2RpZH1fcHVsc2VgKVxuICAgICAgLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRUZW1wbGF0ZShuYW1lLCBkZXNjcmlwdGlvbiwgdmVyc2lvbiwgb3V0cHV0LCBtb2RpZCkge1xuICByZXR1cm4gYFxuPGRpdiBjbGFzcz1cIm5hbm9fbW9kdWxlc19tb2R1bGVcIiBpZD1cIm5hbm9fbW9kdWxlXyR7bW9kaWR9XCI+XG4gIDxkaXYgY2xhc3M9XCJuYW5vX21vZHVsZV9uYW1lXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJib2xkXCI+TmFtZTo8L3NwYW4+XG4gICAgPHNwYW4gaWQ9XCJuYW5vX21vZHVsZV8ke21vZGlkfV9uYW1lXCI+JHtuYW1lfTwvc3Bhbj5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJuYW5vX21vZHVsZV9kZXNjcmlwdGlvblwiPlxuICAgIDxzcGFuIGNsYXNzPVwiYm9sZFwiPkRlc2NyaXB0aW9uOjwvc3Bhbj5cbiAgICA8c3BhbiBpZD1cIm5hbm9fbW9kdWxlXyR7bW9kaWR9X2Rlc2NyaXB0aW9uXCI+JHtkZXNjcmlwdGlvbn08L3NwYW4+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibmFub19tb2R1bGVfb3V0cHV0XCI+XG4gICAgPHNwYW4gY2xhc3M9XCJib2xkXCI+T3V0cHV0Ojwvc3Bhbj5cbiAgICAmbmJzcDs8c3BhblxuICAgICAgY2xhc3M9XCJwdWxzZSBoaWRkZW5cIlxuICAgICAgaWQ9XCJuYW5vX21vZHVsZV8ke21vZGlkfV9wdWxzZVwiXG4gICAgPjwvc3Bhbj48c3BhbiBjbGFzcz1cImV4cGFuZGVyXCI+Jm5ic3A7PC9zcGFuPlxuICAgIDxzcGFuIGNsYXNzPVwiYm9sZFwiPlZlcnNpb246PC9zcGFuPlxuICAgIDxzcGFuIGlkPVwibmFub19tb2R1bGVfJHttb2RpZH1fdmVyc2lvblwiPiR7dmVyc2lvbn0gPC9zcGFuPlxuICA8L2Rpdj5cbiAgPGRpdlxuICAgIGNsYXNzPVwibmFub19tb2R1bGVfb3V0cHV0X3Jlc3RyaWN0ZWRfc2Nyb2xsYWJsZVwiXG4gICAgaWQ9XCJuYW5vX21vZHVsZV8ke21vZGlkfV9vdXRwdXRcIlxuICA+XG4gICAgJHtvdXRwdXR9XG4gIDwvZGl2PlxuPC9kaXY+XG5gO1xufVxuXG5jb25zdCBtYWlsID0gY3JlYXRlTWFpbCgpO1xuXG5mdW5jdGlvbiBjcmVhdGVPdXRwdXRNb2RpZmllcnMobW9kaWQpIHtcbiAgcmV0dXJuIHtcbiAgICBwcmludDogcHJpbnQobW9kaWQpLFxuICAgIHByaW50TGluZTogcHJpbnRMaW5lKG1vZGlkKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJpbnQobW9kaWQpIHtcbiAgcmV0dXJuIChuZXdPdXRwdXQpID0+IHtcbiAgICBjb25zdCBvdXRwdXRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICAgIGBuYW5vX21vZHVsZV8ke21vZGlkfV9vdXRwdXRgXG4gICAgKTtcbiAgICBvdXRwdXRDb250YWluZXIuaW5uZXJIVE1MID0gbmV3T3V0cHV0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcmludExpbmUobW9kaWQpIHtcbiAgcmV0dXJuIChuZXdPdXRwdXQpID0+IHtcbiAgICBjb25zdCBvdXRwdXRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICAgIGBuYW5vX21vZHVsZV8ke21vZGlkfV9vdXRwdXRgXG4gICAgKTtcbiAgICBjb25zdCBsb2dDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGxvZ0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKGBuYW5vX21vZHVsZV9sb2dgKTtcbiAgICBsb2dDb250YWluZXIuaW5uZXJIVE1MID0gbmV3T3V0cHV0O1xuICAgIG91dHB1dENvbnRhaW5lci5wcmVwZW5kKGxvZ0NvbnRhaW5lcik7XG4gIH07XG59XG5cbmNvbnN0IE1BSUxfU0VORF9ERUxBWSA9IDEwO1xuXG5mdW5jdGlvbiBjcmVhdGVNYWlsKCkge1xuICBjb25zdCByZWNpcGllbnRzID0ge307XG4gIGNvbnN0IG9uUmVjZWl2ZSA9IChtYWlsSWQsIG1haWxIYW5kbGVyKSA9PiB7XG4gICAgaWYgKCFyZWNpcGllbnRzW21haWxJZF0pIHJlY2lwaWVudHNbbWFpbElkXSA9IG1haWxIYW5kbGVyO1xuICB9O1xuICBjb25zdCBzZW5kID0gKG1haWwpID0+IHtcbiAgICBsZXQgdG1yID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodG1yKTtcbiAgICAgIGlmICghcmVjaXBpZW50c1ttYWlsLnRvXSkgY29uc29sZS5sb2coYFJlY2lwaWVudCBub3QgZm91bmQ6ICR7bWFpbC50b31gKTtcbiAgICAgIGVsc2UgcmVjaXBpZW50c1ttYWlsLnRvXShtYWlsKTtcbiAgICB9LCBNQUlMX1NFTkRfREVMQVkpO1xuICB9O1xuICByZXR1cm4geyBvblJlY2VpdmUsIHNlbmQgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRm9vdGVyKCkge1xuICBjb25zdCBmb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBmb290ZXIuY2xhc3NMaXN0LmFkZChcIm5hbm9fbW9kdWxlc19mb290ZXJcIik7XG5cbiAgZm9vdGVyLmlubmVySFRNTCA9IGBcbjxkaXYgY2xhc3M9XCJuYW5vX21vZHVsZXNfZm9vdGVyX3Jvd1wiPlxuICA8YSBjbGFzcz1cImdpdGh1Yi1iYWRnZVwiIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vbTlqL25hbm8tbW9kdWxlcy9hY3Rpb25zXCI+XG4gICAgPGRpdiBjbGFzcz1cImdpdGh1Yi1iYWRnZS1sYWJlbFwiPm5hbm8tbW9kdWxlczwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJnaXRodWItYmFkZ2Utc3RhZ2VcIj5BQ1RJT05TPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImdpdGh1Yi1iYWRnZS1zdGF0dXNcIj5QQVNTRUQ8L2Rpdj5cbiAgPC9hPlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwibmFub19tb2R1bGVzX2Zvb3Rlcl9yb3dcIj5cbiAgPGEgY2xhc3M9XCJnaXRodWItYmFkZ2VcIiBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL205ai9uYW5vX21vZHVsZXMvYWN0aW9uc1wiPlxuICAgIDxkaXYgY2xhc3M9XCJnaXRodWItYmFkZ2UtbGFiZWxcIj5uYW5vX21vZHVsZXM8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZ2l0aHViLWJhZGdlLXN0YWdlXCI+QUNUSU9OUzwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJnaXRodWItYmFkZ2Utc3RhdHVzXCI+UEFTU0VEPC9kaXY+XG4gIDwvYT5cbjwvZGl2PlxuICBgO1xuXG4gIHJldHVybiBmb290ZXI7XG59XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgKixcbmJvZHkge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbmJvZHkge1xuICBmb250LXNpemU6IDFlbTtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIHJpZ2h0OiAwO1xuICBib3R0b206IDA7XG4gIGxlZnQ6IDA7XG4gIGJhY2tncm91bmQ6ICMwMDA7XG59XG5cbi5uYW5vX21vZHVsZXNfY29udGFpbmVyIHtcbiAgZmxleDogMTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgcGFkZGluZzogMDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuLm5hbm9fbW9kdWxlc190aXRsZSB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XG4gIHBhZGRpbmc6IDhweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgY29sb3I6ICNmZmY7XG4gIHBvc2l0aW9uOiBzdGlja3k7XG4gIHRvcDogMDtcbiAgei1pbmRleDogMTtcbn1cblxuLm5hbm9fbW9kdWxlc19tb2R1bGVzIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maWxsLCBtaW5tYXgoMzIwcHgsIDFmcikpO1xuICBncmlkLWdhcDogOHB4O1xuICBwYWRkaW5nOiA4cHg7XG4gIGJhY2tncm91bmQ6ICNlZWU7XG4gIGZsZXg6IDE7XG4gIGdyaWQtYXV0by1yb3dzOiBtYXgtY29udGVudDtcbn1cblxuLm5hbm9fbW9kdWxlc19tb2R1bGUge1xuICBib3gtc2hhZG93OiAwcHggNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xuICBwYWRkaW5nOiA4cHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgYmFja2dyb3VuZDogI2ZmZjtcbn1cblxuLm5hbm9fbW9kdWxlc19ub19tb2R1bGVzIHtcbiAgcGFkZGluZzogOHB4O1xufVxuXG4ubmFub19tb2R1bGVzX21vZHVsZV9lcnJvciB7XG4gIGNvbG9yOiAjZjAwO1xufVxuXG4uYm9sZCB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XG59XG5cbi5uYW5vX21vZHVsZV9vdXRwdXQge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4ubmFub19tb2R1bGVfb3V0cHV0X3Jlc3RyaWN0ZWRfc2Nyb2xsYWJsZSB7XG4gIG1heC1oZWlnaHQ6IDkzcHg7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4ucHVsc2Uge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiAxNnB4O1xuICBoZWlnaHQ6IDhweDtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBiYWNrZ3JvdW5kOiBncmV5O1xuICBhbmltYXRpb246IHB1bHNlIGVhc2UtaW4tb3V0IDFzIGluZmluaXRlO1xufVxuXG4uaGlkZGVuIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLmV4cGFuZGVyIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm5hbm9fbW9kdWxlc19mb290ZXIge1xuICBiYWNrZ3JvdW5kOiAjMDAwO1xuICBjb2xvcjogI2ZmZjtcbiAgcGFkZGluZzogOHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBnYXA6IDhweDtcbiAgZmxleC13cmFwOiB3cmFwO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn1cblxuLm5hbm9fbW9kdWxlc19mb290ZXJfcm93IHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xufVxuXG4ubmFub19tb2R1bGVzX2Zvb3Rlcl9iYWRnZSB7XG4gIG1hcmdpbi1sZWZ0OiA4cHg7XG4gIG1heC1oZWlnaHQ6IDE2cHg7XG59XG5cbi5naXRodWItYmFkZ2Uge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYm9yZGVyLXJhZGl1czogMHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGNvbG9yOiAjZmZmO1xufVxuXG4uZ2l0aHViLWJhZGdlLWxhYmVsIHtcbiAgcGFkZGluZzogNHB4IDhweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIyMjtcbn1cblxuLmdpdGh1Yi1iYWRnZS1zdGFnZSB7XG4gIHBhZGRpbmc6IDRweCA4cHg7XG4gIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XG59XG5cbi5naXRodWItYmFkZ2Utc3RhdHVzIHtcbiAgcGFkZGluZzogNHB4IDhweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XG59XG5cbkBrZXlmcmFtZXMgcHVsc2F0aW5nIHtcbiAgMCUge1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbiAgMTAwJSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxufVxuXG5Aa2V5ZnJhbWVzIHB1bHNlIHtcbiAgMCUge1xuICAgIGJhY2tncm91bmQ6IHNpbHZlcjtcbiAgfVxuICAyNSUge1xuICAgIGJhY2tncm91bmQ6IGdyZWVueWVsbG93O1xuICB9XG4gIDUwJSB7XG4gICAgYmFja2dyb3VuZDogc2lsdmVyO1xuICB9XG4gIDc1JSB7XG4gICAgYmFja2dyb3VuZDogZ29sZGVucm9kO1xuICB9XG4gIDEwMCUge1xuICAgIGJhY2tncm91bmQ6IHNpbHZlcjtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvbmFuby1tb2R1bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7RUFFRSxTQUFTO0VBQ1QsVUFBVTtBQUNaOztBQUVBO0VBQ0UsY0FBYztFQUNkLHNCQUFzQjtFQUN0QixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFdBQVc7RUFDWCxZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLE1BQU07RUFDTixRQUFRO0VBQ1IsU0FBUztFQUNULE9BQU87RUFDUCxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxPQUFPO0VBQ1AsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixVQUFVO0VBQ1Ysc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLFlBQVk7RUFDWixzQkFBc0I7RUFDdEIsV0FBVztFQUNYLGdCQUFnQjtFQUNoQixNQUFNO0VBQ04sVUFBVTtBQUNaOztBQUVBO0VBQ0UsYUFBYTtFQUNiLDREQUE0RDtFQUM1RCxhQUFhO0VBQ2IsWUFBWTtFQUNaLGdCQUFnQjtFQUNoQixPQUFPO0VBQ1AsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0UsMkNBQTJDO0VBQzNDLFlBQVk7RUFDWixvQ0FBb0M7RUFDcEMsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsV0FBVztBQUNiOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsY0FBYztBQUNoQjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixXQUFXO0VBQ1gsV0FBVztFQUNYLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsd0NBQXdDO0FBQzFDOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0UscUJBQXFCO0VBQ3JCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixXQUFXO0VBQ1gsWUFBWTtFQUNaLGFBQWE7RUFDYixRQUFRO0VBQ1IsZUFBZTtFQUNmLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsMkJBQTJCO0FBQzdCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsdUJBQXVCO0VBQ3ZCLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsc0JBQXNCO0VBQ3RCLHFCQUFxQjtFQUNyQixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRTtJQUNFLFVBQVU7RUFDWjtFQUNBO0lBQ0UsVUFBVTtFQUNaO0FBQ0Y7O0FBRUE7RUFDRTtJQUNFLGtCQUFrQjtFQUNwQjtFQUNBO0lBQ0UsdUJBQXVCO0VBQ3pCO0VBQ0E7SUFDRSxrQkFBa0I7RUFDcEI7RUFDQTtJQUNFLHFCQUFxQjtFQUN2QjtFQUNBO0lBQ0Usa0JBQWtCO0VBQ3BCO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKixcXG5ib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbmJvZHkge1xcbiAgZm9udC1zaXplOiAxZW07XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxufVxcblxcbi5uYW5vX21vZHVsZXNfY29udGFpbmVyIHtcXG4gIGZsZXg6IDE7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4ubmFub19tb2R1bGVzX3RpdGxlIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcbiAgY29sb3I6ICNmZmY7XFxuICBwb3NpdGlvbjogc3RpY2t5O1xcbiAgdG9wOiAwO1xcbiAgei1pbmRleDogMTtcXG59XFxuXFxuLm5hbm9fbW9kdWxlc19tb2R1bGVzIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heCgzMjBweCwgMWZyKSk7XFxuICBncmlkLWdhcDogOHB4O1xcbiAgcGFkZGluZzogOHB4O1xcbiAgYmFja2dyb3VuZDogI2VlZTtcXG4gIGZsZXg6IDE7XFxuICBncmlkLWF1dG8tcm93czogbWF4LWNvbnRlbnQ7XFxufVxcblxcbi5uYW5vX21vZHVsZXNfbW9kdWxlIHtcXG4gIGJveC1zaGFkb3c6IDBweCA0cHggOHB4IHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbn1cXG5cXG4ubmFub19tb2R1bGVzX25vX21vZHVsZXMge1xcbiAgcGFkZGluZzogOHB4O1xcbn1cXG5cXG4ubmFub19tb2R1bGVzX21vZHVsZV9lcnJvciB7XFxuICBjb2xvcjogI2YwMDtcXG59XFxuXFxuLmJvbGQge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcXG59XFxuXFxuLm5hbm9fbW9kdWxlX291dHB1dCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5uYW5vX21vZHVsZV9vdXRwdXRfcmVzdHJpY3RlZF9zY3JvbGxhYmxlIHtcXG4gIG1heC1oZWlnaHQ6IDkzcHg7XFxuICBvdmVyZmxvdzogYXV0bztcXG59XFxuXFxuLnB1bHNlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiAxNnB4O1xcbiAgaGVpZ2h0OiA4cHg7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBiYWNrZ3JvdW5kOiBncmV5O1xcbiAgYW5pbWF0aW9uOiBwdWxzZSBlYXNlLWluLW91dCAxcyBpbmZpbml0ZTtcXG59XFxuXFxuLmhpZGRlbiB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uZXhwYW5kZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5uYW5vX21vZHVsZXNfZm9vdGVyIHtcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxuICBjb2xvcjogI2ZmZjtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBnYXA6IDhweDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4ubmFub19tb2R1bGVzX2Zvb3Rlcl9yb3cge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxufVxcblxcbi5uYW5vX21vZHVsZXNfZm9vdGVyX2JhZGdlIHtcXG4gIG1hcmdpbi1sZWZ0OiA4cHg7XFxuICBtYXgtaGVpZ2h0OiAxNnB4O1xcbn1cXG5cXG4uZ2l0aHViLWJhZGdlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiAwcHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzMzMztcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5cXG4uZ2l0aHViLWJhZGdlLWxhYmVsIHtcXG4gIHBhZGRpbmc6IDRweCA4cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjIyO1xcbn1cXG5cXG4uZ2l0aHViLWJhZGdlLXN0YWdlIHtcXG4gIHBhZGRpbmc6IDRweCA4cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzO1xcbn1cXG5cXG4uZ2l0aHViLWJhZGdlLXN0YXR1cyB7XFxuICBwYWRkaW5nOiA0cHggOHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XFxufVxcblxcbkBrZXlmcmFtZXMgcHVsc2F0aW5nIHtcXG4gIDAlIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gIH1cXG4gIDEwMCUge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgfVxcbn1cXG5cXG5Aa2V5ZnJhbWVzIHB1bHNlIHtcXG4gIDAlIHtcXG4gICAgYmFja2dyb3VuZDogc2lsdmVyO1xcbiAgfVxcbiAgMjUlIHtcXG4gICAgYmFja2dyb3VuZDogZ3JlZW55ZWxsb3c7XFxuICB9XFxuICA1MCUge1xcbiAgICBiYWNrZ3JvdW5kOiBzaWx2ZXI7XFxuICB9XFxuICA3NSUge1xcbiAgICBiYWNrZ3JvdW5kOiBnb2xkZW5yb2Q7XFxuICB9XFxuICAxMDAlIHtcXG4gICAgYmFja2dyb3VuZDogc2lsdmVyO1xcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25hbm8tbW9kdWxlcy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9uYW5vLW1vZHVsZXMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsImlkIiwiX2siLCJwdXNoIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsImFzeW5jIiwiY29uc29sZSIsImxvZyIsIk5BTk9NT0RVTEVTIiwiTU9EVUxFX0lOREVYIiwiTmFub01vZHVsZXNJbmRleCIsImltcG9ydCIsIk5BTk9NT0RVTEVTX1VSTF9QUk9EIiwiZSIsImdldE1vZHVsZUluZGV4IiwiTU9EVUxFUyIsImRlZmF1bHQiLCJBcnJheSIsImlzQXJyYXkiLCJNT0RVTEUiLCJjb2RlIiwibWVzc2FnZSIsImNvbXBvbmVudCIsImNvbnRhaW5lciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInRpdGxlIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVGb290ZXIiLCJib2R5IiwibmFub01vZHVsZXMiLCJOYW5vTW9kdWxlcyIsIm5hbm9Nb2R1bGVzTW9kdWxlQ29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJtb2RpZCIsImVudHJpZXMiLCJsb2FkTW9kdWxlIiwiZ2V0VGVtcFBsYWNlaG9sZGVyTW9kdWxlTmFtZSIsIm1vZHVsZU5hbWUiLCJyZXBsYWNlQWxsIiwibW9kdWxlRGVzY3JpcHRpb24iLCJtb2R1bGVQdWxzZSIsIm1vZHVsZVZlcnNpb24iLCJ0ZW1wbGF0ZUxvYWRpbmciLCJidWlsZFRlbXBsYXRlIiwiaW5zdGFuY2UiLCJNT0RVTEVfTkFNRSIsIk1PRFVMRV9ERVNDUklQVElPTiIsIk1PRFVMRV9QVUxTRSIsIk1PRFVMRV9WRVJTSU9OIiwibW9kdWxlTWFpbElkIiwiTU9EVUxFX01BSUxfSUQiLCJtb2R1bGVNYWlsSGFuZGxlciIsIk1PRFVMRV9NQUlMX0hBTkRMRVIiLCJNT0RVTEVfT1VUUFVUIiwiY3JlYXRlT3V0cHV0TW9kaWZpZXJzIiwibWFpbCIsIm9uUmVjZWl2ZSIsIk1PRFVMRV9NQUlMIiwic2VuZCIsIk1PRFVMRV9NQUlOIiwiZXJyb3IiLCJwcmludCIsInJlbW92ZSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInZlcnNpb24iLCJvdXRwdXQiLCJjcmVhdGVNYWlsIiwicHJpbnRMaW5lIiwibmV3T3V0cHV0Iiwib3V0cHV0Q29udGFpbmVyIiwibG9nQ29udGFpbmVyIiwicHJlcGVuZCIsIk1BSUxfU0VORF9ERUxBWSIsInJlY2lwaWVudHMiLCJtYWlsSWQiLCJtYWlsSGFuZGxlciIsInRtciIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJ0byIsImZvb3RlciIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwib3B0aW9ucyIsInN0eWxlVGFnVHJhbnNmb3JtIiwic2V0QXR0cmlidXRlcyIsImluc2VydCIsImRvbUFQSSIsImluc2VydFN0eWxlRWxlbWVudCIsImxvY2FscyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImdldFRhcmdldCIsIkVycm9yIiwiZWxlbWVudCIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiXSwic291cmNlUm9vdCI6IiJ9