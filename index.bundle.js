"use strict";(self.webpackChunknano_modules=self.webpackChunknano_modules||[]).push([[57],{89:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var o="",t=void 0!==e[5];return e[4]&&(o+="@supports (".concat(e[4],") {")),e[2]&&(o+="@media ".concat(e[2]," {")),t&&(o+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),o+=n(e),t&&(o+="}"),e[2]&&(o+="}"),e[4]&&(o+="}"),o})).join("")},e.i=function(n,o,t,s,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var r=0;r<this.length;r++){var d=this[r][0];null!=d&&(i[d]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);t&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),o&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=o):A[2]=o),s&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=s):A[4]="".concat(s)),e.push(A))}},e}},963:n=>{n.exports=function(n){var e=n[1],o=n[3];if(!o)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(s," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},290:(n,e,o)=>{o.d(e,{CU:()=>s,sS:()=>t});const t={"nano-modules":{build:"https://api.github.com/repos/M9J/nano-modules/actions/workflows/actions.yml/runs",deploy:"https://api.github.com/repos/M9J/nano-modules/actions/workflows/pages/pages-build-deployment/runs"},nano_modules:{build:"https://api.github.com/repos/M9J/nano_modules/actions/workflows/actions.yml/runs",deploy:"https://api.github.com/repos/M9J/nano_modules/actions/workflows/pages/pages-build-deployment/runs"}};async function s(n){if(n){const e=await fetch(n),o=await e.json();console.log("response",o);const t=o.workflow_runs;if(Array.isArray(t)&&t.length>0){const n=t[0];return{status:n.status,conclusion:n.conclusion}}}}},462:(n,e,o)=>{async function t(){console.log("> Nanomod.js _");const n=[];try{const e=await async function(){try{let n=[];return n=await import(s),n}catch(n){console.log(n)}}();if(e){const o=e.default;if(Array.isArray(o)&&o.length>0)for(const e of o)n.push(e)}}catch(n){const{code:e,message:o}=n;console.log(`${e}: ${o}`)}return n}o.d(e,{A:()=>t});const s="https://M9J.github.io/nano_modules/index.js"},731:(n,e,o)=>{o.a(n,(async(n,e)=>{try{o(508);var t=o(462),s=o(290);const a=await c();document.body.appendChild(a),r(),C();const i=[];async function r(){const n=await(0,t.A)();if(n){const e=document.getElementById("nano_modules_modules");n.length>0?e.innerHTML="":e.innerHTML="<div class='nano_modules_no_modules'>No Modules found</div>";for(const[e,o]of n.entries())o&&await d(o,e);for(const n of i)n&&await l(n)}}async function d(n,e){let o=A(n),t="...",s=!1,a="...";const r=u(o,t,a,"",e);document.getElementById("nano_modules_modules").innerHTML+=r;const d=new((await n()).default);o=d.MODULE_NAME?d.MODULE_NAME:"-",t=d.MODULE_DESCRIPTION?d.MODULE_DESCRIPTION:"-",s=d.MODULE_PULSE||!1,a=d.MODULE_VERSION?d.MODULE_VERSION:"-";const l=d.MODULE_MAIL_ID||null,c=d.MODULE_MAIL_HANDLER||null;d.MODULE_OUTPUT=m(e),l&&c&&(p.onReceive(l,c),d.MODULE_MAIL={send:p.send}),document.getElementById(`nano_module_${e}_name`).innerHTML=o,document.getElementById(`nano_module_${e}_description`).innerHTML=t,document.getElementById(`nano_module_${e}_version`).innerHTML=a,s&&document.getElementById(`nano_module_${e}_pulse`).classList.remove("hidden"),d.MODULE_ID=e,i.push(d)}async function l(n){if(n.MODULE_MAIN&&"function"==typeof n.MODULE_MAIN)try{await n.MODULE_MAIN()}catch(e){n.MODULE_OUTPUT.print(`ERROR: ${e.code}: ${e.message}`)}}function A(n){if(n)return n.toString().replaceAll("() => import(","").replaceAll(")","").replaceAll('"',"")}async function c(){const n=document.createElement("div");n.classList.add("nano_modules_container");const e=document.createElement("div");e.classList.add("nano_modules_title"),e.innerHTML="NanoModules";const o=document.createElement("div"),t=document.createElement("div");t.classList.add("workflow-status"),t.id="workflow-status-nano-modules",o.appendChild(t);const s=document.createElement("div");s.classList.add("workflow-status"),s.id="workflow-status-nano_modules",o.appendChild(s),e.appendChild(o);const a=document.createElement("div");a.classList.add("nano_modules_modules"),a.id="nano_modules_modules",n.appendChild(e),n.appendChild(a);const i=await B();return n.appendChild(i),n}function u(n,e,o,t,s){return`\n  <div class="nano_modules_module" id="nano_module_${s}">\n    <div class="nano_module_name">\n      <span class="bold">Name:</span>\n      <span id="nano_module_${s}_name">${n}</span>\n    </div>\n    <div class="nano_module_description">\n      <span class="bold">Description:</span>\n      <span id="nano_module_${s}_description">${e}</span>\n    </div>\n    <div class="nano_module_output">\n      <span class="bold">Output:</span>\n      <span id="nano_module_${s}_pulse" class="pulse hidden">\n        &nbsp;<span class="pulse_dot"></span>\n      </span>\n      <span class="expander">&nbsp;</span>\n      <span class="bold">Version:</span>\n      <span id="nano_module_${s}_version">${o} </span>\n    </div>\n    <div\n      class="nano_module_output_restricted_scrollable"\n      id="nano_module_${s}_output"\n    >\n      ${t}\n    </div>\n  </div>\n  `}const p=b();function m(n){return{print:f(n),printLine:g(n)}}function f(n){return e=>{document.getElementById(`nano_module_${n}_output`).innerHTML=e}}function g(n){return e=>{document.getElementById(`nano_module_${n}_output`).prepend(e,document.createElement("br"))}}const E=0;function b(){const n={};return{onReceive:(e,o)=>{n[e]||(n[e]=o)},send:e=>{let o=setTimeout((()=>{clearTimeout(o),n[e.to]?n[e.to](e):console.log(`Recipient not found: ${e.to}`)}),E)}}}async function B(){const n=document.createElement("div");return n.classList.add("nano_modules_footer"),n.innerHTML='\n    <div class="nano_modules_footer_row">\n      <a class="github-badge" href="https://github.com/m9j/nano-modules/actions">\n        <div class="github-badge-label">nano-modules</div>\n        <div class="github-badge-stage">ACTIONS</div>\n        \x3c!-- <div class="github-badge-status"></div> --\x3e\n      </a>\n    </div>\n    <div class="nano_modules_footer_row">\n      <a class="github-badge" href="https://github.com/m9j/nano_modules/actions">\n        <div class="github-badge-label">nano_modules</div>\n        <div class="github-badge-stage">ACTIONS</div>\n        \x3c!-- <div class="github-badge-status"></div> --\x3e\n      </a>\n    </div>\n  ',n}async function C(){const n="queued",e="success",o="failure",{status:t,conclusion:a}=await(0,s.CU)(s.sS["nano-modules"].build),i=document.getElementById("workflow-status-nano-modules");i.classList.remove(["workflow-status-success","workflow-status-failed","workflow-status-progressing"]),a===e?i.classList.add("workflow-status-success"):a===o?i.classList.add("workflow-status-failed"):t===n&&i.classList.add("workflow-status-progressing");const{status:r,conclusion:d}=await(0,s.CU)(s.sS.nano_modules.build),l=document.getElementById("workflow-status-nano_modules");l.classList.remove(["workflow-status-success","workflow-status-failed","workflow-status-progressing"]),d===e?l.classList.add("workflow-status-success"):d===o?l.classList.add("workflow-status-failed"):r===n&&l.classList.add("workflow-status-progressing")}e()}catch(_){e(_)}}),1)},497:(n,e,o)=>{o.d(e,{A:()=>r});var t=o(963),s=o.n(t),a=o(89),i=o.n(a)()(s());i.push([n.id,'*,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 1em;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: #000;\n}\n\n.nano_modules_container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.nano_modules_title {\n  font-weight: bolder;\n  padding: 8px;\n  background-color: #000;\n  color: #fff;\n  position: sticky;\n  top: 0;\n  z-index: 1;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.nano_modules_modules {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 8px;\n  padding: 8px;\n  background: #eee;\n  flex: 1;\n  grid-auto-rows: max-content;\n}\n\n.nano_modules_module {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);\n  padding: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background: #fff;\n}\n\n.nano_modules_no_modules {\n  padding: 8px;\n}\n\n.nano_modules_module_error {\n  color: #f00;\n}\n\n.bold {\n  font-weight: bolder;\n}\n\n.nano_module_output {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.nano_module_output_restricted_scrollable {\n  max-height: 93px;\n  overflow: auto;\n}\n\n.pulse {\n  display: flex;\n  align-items: center;\n}\n\n.pulse_dot {\n  display: inline-block;\n  width: 16px;\n  height: 8px;\n  border-radius: 8px;\n  background: silver;\n  animation: pulse ease-in-out 1s infinite;\n}\n\n.pulse_dot:nth-child(even) {\n  animation-direction: reverse;\n}\n\n.hidden {\n  display: none;\n}\n\n.expander {\n  display: inline-block;\n  width: 100%;\n}\n\n.nano_modules_footer {\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.nano_modules_footer_row {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nano_modules_footer_badge {\n  margin-left: 8px;\n  max-height: 16px;\n}\n\n.github-badge {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 0px;\n  overflow: hidden;\n  border: 1px solid #333;\n  text-decoration: none;\n  color: #fff;\n}\n\n.github-badge-label {\n  padding: 4px 8px;\n  background-color: #222;\n}\n\n.github-badge-stage {\n  padding: 4px 8px;\n  background-color: #333;\n}\n\n.github-badge-status {\n  padding: 4px 8px;\n  background-color: green;\n}\n\n.workflow-status {\n  content: "";\n  width: 8px;\n  height: 8px;\n  border-radius: 100px;\n  display: inline-block;\n  background-color: #333;\n  margin-left: 8px;\n}\n\n.workflow-status-progressing {\n  background-color: goldenrod;\n}\n\n.workflow-status-failed {\n  background-color: red;\n}\n\n.workflow-status-success {\n  background-color: greenyellow;\n}\n\n@keyframes pulse {\n  0% {\n    background: silver;\n  }\n  25% {\n    background: goldenrod;\n  }\n  50% {\n    background-color: silver;\n  }\n  75% {\n    background-color: greenyellow;\n  }\n  100% {\n    background: silver;\n  }\n}\n',"",{version:3,sources:["webpack://./src/nano-modules.css"],names:[],mappings:"AAAA;;EAEE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,cAAc;EACd,sBAAsB;EACtB,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;EACP,gBAAgB;AAClB;;AAEA;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,sBAAsB;EACtB,WAAW;EACX,gBAAgB;EAChB,MAAM;EACN,UAAU;EACV,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,4DAA4D;EAC5D,aAAa;EACb,YAAY;EACZ,gBAAgB;EAChB,OAAO;EACP,2BAA2B;AAC7B;;AAEA;EACE,2CAA2C;EAC3C,YAAY;EACZ,oCAAoC;EACpC,gBAAgB;AAClB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,kBAAkB;EAClB,wCAAwC;AAC1C;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,YAAY;EACZ,aAAa;EACb,QAAQ;EACR,eAAe;EACf,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,2BAA2B;AAC7B;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,kBAAkB;EAClB,gBAAgB;EAChB,sBAAsB;EACtB,qBAAqB;EACrB,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,UAAU;EACV,WAAW;EACX,oBAAoB;EACpB,qBAAqB;EACrB,sBAAsB;EACtB,gBAAgB;AAClB;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE;IACE,kBAAkB;EACpB;EACA;IACE,qBAAqB;EACvB;EACA;IACE,wBAAwB;EAC1B;EACA;IACE,6BAA6B;EAC/B;EACA;IACE,kBAAkB;EACpB;AACF",sourcesContent:['*,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 1em;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: #000;\n}\n\n.nano_modules_container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.nano_modules_title {\n  font-weight: bolder;\n  padding: 8px;\n  background-color: #000;\n  color: #fff;\n  position: sticky;\n  top: 0;\n  z-index: 1;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.nano_modules_modules {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 8px;\n  padding: 8px;\n  background: #eee;\n  flex: 1;\n  grid-auto-rows: max-content;\n}\n\n.nano_modules_module {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);\n  padding: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background: #fff;\n}\n\n.nano_modules_no_modules {\n  padding: 8px;\n}\n\n.nano_modules_module_error {\n  color: #f00;\n}\n\n.bold {\n  font-weight: bolder;\n}\n\n.nano_module_output {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.nano_module_output_restricted_scrollable {\n  max-height: 93px;\n  overflow: auto;\n}\n\n.pulse {\n  display: flex;\n  align-items: center;\n}\n\n.pulse_dot {\n  display: inline-block;\n  width: 16px;\n  height: 8px;\n  border-radius: 8px;\n  background: silver;\n  animation: pulse ease-in-out 1s infinite;\n}\n\n.pulse_dot:nth-child(even) {\n  animation-direction: reverse;\n}\n\n.hidden {\n  display: none;\n}\n\n.expander {\n  display: inline-block;\n  width: 100%;\n}\n\n.nano_modules_footer {\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.nano_modules_footer_row {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nano_modules_footer_badge {\n  margin-left: 8px;\n  max-height: 16px;\n}\n\n.github-badge {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 0px;\n  overflow: hidden;\n  border: 1px solid #333;\n  text-decoration: none;\n  color: #fff;\n}\n\n.github-badge-label {\n  padding: 4px 8px;\n  background-color: #222;\n}\n\n.github-badge-stage {\n  padding: 4px 8px;\n  background-color: #333;\n}\n\n.github-badge-status {\n  padding: 4px 8px;\n  background-color: green;\n}\n\n.workflow-status {\n  content: "";\n  width: 8px;\n  height: 8px;\n  border-radius: 100px;\n  display: inline-block;\n  background-color: #333;\n  margin-left: 8px;\n}\n\n.workflow-status-progressing {\n  background-color: goldenrod;\n}\n\n.workflow-status-failed {\n  background-color: red;\n}\n\n.workflow-status-success {\n  background-color: greenyellow;\n}\n\n@keyframes pulse {\n  0% {\n    background: silver;\n  }\n  25% {\n    background: goldenrod;\n  }\n  50% {\n    background-color: silver;\n  }\n  75% {\n    background-color: greenyellow;\n  }\n  100% {\n    background: silver;\n  }\n}\n'],sourceRoot:""}]);const r=i},508:(n,e,o)=>{var t=o(72),s=o.n(t),a=o(825),i=o.n(a),r=o(659),d=o.n(r),l=o(56),A=o.n(l),c=o(540),u=o.n(c),p=o(113),m=o.n(p),f=o(497),g={};g.styleTagTransform=m(),g.setAttributes=A(),g.insert=d().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=u(),s()(f.A,g),f.A&&f.A.locals&&f.A.locals},72:n=>{var e=[];function o(n){for(var o=-1,t=0;t<e.length;t++)if(e[t].identifier===n){o=t;break}return o}function t(n,t){for(var a={},i=[],r=0;r<n.length;r++){var d=n[r],l=t.base?d[0]+t.base:d[0],A=a[l]||0,c="".concat(l," ").concat(A);a[l]=A+1;var u=o(c),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=s(p,t);t.byIndex=r,e.splice(r,0,{identifier:c,updater:m,references:1})}i.push(c)}return i}function s(n,e){var o=e.domAPI(e);return o.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;o.update(n=e)}else o.remove()}}n.exports=function(n,s){var a=t(n=n||[],s=s||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var r=o(a[i]);e[r].references--}for(var d=t(n,s),l=0;l<a.length;l++){var A=o(a[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=d}}},659:n=>{var e={};n.exports=function(n,o){var t=function(n){if(void 0===e[n]){var o=document.querySelector(n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(n){o=null}e[n]=o}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(o)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,o)=>{n.exports=function(n){var e=o.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(o){!function(n,e,o){var t="";o.supports&&(t+="@supports (".concat(o.supports,") {")),o.media&&(t+="@media ".concat(o.media," {"));var s=void 0!==o.layer;s&&(t+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),t+=o.css,s&&(t+="}"),o.media&&(t+="}"),o.supports&&(t+="}");var a=o.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,o)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},n=>{n(n.s=731)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,