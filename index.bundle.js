"use strict";(self.webpackChunknano_modules=self.webpackChunknano_modules||[]).push([[57,896],{89:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var o="",t=void 0!==e[5];return e[4]&&(o+="@supports (".concat(e[4],") {")),e[2]&&(o+="@media ".concat(e[2]," {")),t&&(o+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),o+=n(e),t&&(o+="}"),e[2]&&(o+="}"),e[4]&&(o+="}"),o})).join("")},e.i=function(n,o,t,a,s){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var l=0;l<this.length;l++){var d=this[l][0];null!=d&&(i[d]=!0)}for(var r=0;r<n.length;r++){var A=[].concat(n[r]);t&&i[A[0]]||(void 0!==s&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=s),o&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=o):A[2]=o),a&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=a):A[4]="".concat(a)),e.push(A))}},e}},963:n=>{n.exports=function(n){var e=n[1],o=n[3];if(!o)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),s="/*# ".concat(a," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},70:(n,e,o)=>{async function t(){console.log("> Nanomod.js _");const n=[];try{const e=await async function(){try{let n=[];return n=await import(a),n}catch(n){console.log(n)}}();if(e){const o=e.default;if(Array.isArray(o)&&o.length>0)for(const e of o)n.push(e)}}catch(n){const{code:e,message:o}=n;console.log(`${e}: ${o}`)}return n}o.d(e,{A:()=>t});const a="https://M9J.github.io/nano_modules/index.js"},11:(n,e,o)=>{o.d(e,{A:()=>l});var t=o(963),a=o.n(t),s=o(89),i=o.n(s)()(a());i.push([n.id,"*,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 1em;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: #000;\n}\n\n.nano_modules_container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.nano_modules_title {\n  font-weight: bolder;\n  padding: 8px;\n  background-color: #000;\n  color: #fff;\n  position: sticky;\n  top: 0;\n}\n\n.nano_modules_modules {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 8px;\n  padding: 8px;\n  background: #eee;\n}\n\n.nano_modules_module {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);\n  padding: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background: #fff;\n}\n\n.nano_modules_no_modules {\n  padding: 8px;\n}\n\n.nano_modules_module_error {\n  color: #f00;\n}\n\n.bold {\n  font-weight: bolder;\n}\n\n.nano_module_output {\n  display: flex;\n  flex-direction: column;\n}\n\n.nano_module_pulse {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  padding: 8px;\n  margin-left: -8px;\n}\n\n.nano_module_output_restricted_scrollable {\n  max-height: 8vh;\n  overflow: auto;\n}\n\n.pulse {\n  display: inline-block;\n  width: 50%;\n  height: 5px;\n  background: goldenrod;\n  animation: pulsating ease-in-out 1s alternate infinite;\n}\n\n.pulse:nth-child(1) {\n  animation-delay: 0;\n}\n\n.pulse:nth-child(2) {\n  animation-delay: 0.25s;\n}\n\n.pulse:nth-child(3) {\n  animation-delay: 0.5s;\n}\n\n.pulse:nth-child(4) {\n  animation-delay: 0.75s;\n}\n\n.pulse:nth-child(5) {\n  animation-delay: 1s;\n}\n\n.hidden {\n  display: none;\n}\n\n.nano_modules_footer {\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n}\n\n.nano_modules_footer_row {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nano_modules_footer_badge {\n  margin-left: 8px;\n}\n\n@keyframes pulsating {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n","",{version:3,sources:["webpack://./src/nano_modules.css"],names:[],mappings:"AAAA;;EAEE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,cAAc;EACd,sBAAsB;EACtB,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;EACP,gBAAgB;AAClB;;AAEA;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,sBAAsB;EACtB,WAAW;EACX,gBAAgB;EAChB,MAAM;AACR;;AAEA;EACE,aAAa;EACb,4DAA4D;EAC5D,aAAa;EACb,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,2CAA2C;EAC3C,YAAY;EACZ,oCAAoC;EACpC,gBAAgB;AAClB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,WAAW;EACX,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,qBAAqB;EACrB,UAAU;EACV,WAAW;EACX,qBAAqB;EACrB,sDAAsD;AACxD;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,YAAY;EACZ,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,2BAA2B;AAC7B;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;AACF",sourcesContent:["*,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 1em;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: #000;\n}\n\n.nano_modules_container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.nano_modules_title {\n  font-weight: bolder;\n  padding: 8px;\n  background-color: #000;\n  color: #fff;\n  position: sticky;\n  top: 0;\n}\n\n.nano_modules_modules {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 8px;\n  padding: 8px;\n  background: #eee;\n}\n\n.nano_modules_module {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);\n  padding: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background: #fff;\n}\n\n.nano_modules_no_modules {\n  padding: 8px;\n}\n\n.nano_modules_module_error {\n  color: #f00;\n}\n\n.bold {\n  font-weight: bolder;\n}\n\n.nano_module_output {\n  display: flex;\n  flex-direction: column;\n}\n\n.nano_module_pulse {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  padding: 8px;\n  margin-left: -8px;\n}\n\n.nano_module_output_restricted_scrollable {\n  max-height: 8vh;\n  overflow: auto;\n}\n\n.pulse {\n  display: inline-block;\n  width: 50%;\n  height: 5px;\n  background: goldenrod;\n  animation: pulsating ease-in-out 1s alternate infinite;\n}\n\n.pulse:nth-child(1) {\n  animation-delay: 0;\n}\n\n.pulse:nth-child(2) {\n  animation-delay: 0.25s;\n}\n\n.pulse:nth-child(3) {\n  animation-delay: 0.5s;\n}\n\n.pulse:nth-child(4) {\n  animation-delay: 0.75s;\n}\n\n.pulse:nth-child(5) {\n  animation-delay: 1s;\n}\n\n.hidden {\n  display: none;\n}\n\n.nano_modules_footer {\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n}\n\n.nano_modules_footer_row {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nano_modules_footer_badge {\n  margin-left: 8px;\n}\n\n@keyframes pulsating {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n"],sourceRoot:""}]);const l=i},994:(n,e,o)=>{var t=o(72),a=o.n(t),s=o(825),i=o.n(s),l=o(659),d=o.n(l),r=o(56),A=o.n(r),c=o(540),u=o.n(c),p=o(113),m=o.n(p),f=o(11),_={};_.styleTagTransform=m(),_.setAttributes=A(),_.insert=d().bind(null,"head"),_.domAPI=i(),_.insertStyleElement=u(),a()(f.A,_),f.A&&f.A.locals&&f.A.locals},72:n=>{var e=[];function o(n){for(var o=-1,t=0;t<e.length;t++)if(e[t].identifier===n){o=t;break}return o}function t(n,t){for(var s={},i=[],l=0;l<n.length;l++){var d=n[l],r=t.base?d[0]+t.base:d[0],A=s[r]||0,c="".concat(r," ").concat(A);s[r]=A+1;var u=o(c),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=a(p,t);t.byIndex=l,e.splice(l,0,{identifier:c,updater:m,references:1})}i.push(c)}return i}function a(n,e){var o=e.domAPI(e);return o.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;o.update(n=e)}else o.remove()}}n.exports=function(n,a){var s=t(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<s.length;i++){var l=o(s[i]);e[l].references--}for(var d=t(n,a),r=0;r<s.length;r++){var A=o(s[r]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}s=d}}},659:n=>{var e={};n.exports=function(n,o){var t=function(n){if(void 0===e[n]){var o=document.querySelector(n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(n){o=null}e[n]=o}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(o)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,o)=>{n.exports=function(n){var e=o.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(o){!function(n,e,o){var t="";o.supports&&(t+="@supports (".concat(o.supports,") {")),o.media&&(t+="@media ".concat(o.media," {"));var a=void 0!==o.layer;a&&(t+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),t+=o.css,a&&(t+="}"),o.media&&(t+="}"),o.supports&&(t+="}");var s=o.sourceMap;s&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,o)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},838:(n,e,o)=>{o.a(n,(async(n,e)=>{try{o(994);var t=o(70);function a(){const n=document.createElement("div");n.classList.add("nano_modules_container");const e=document.createElement("div");e.classList.add("nano_modules_title"),e.innerHTML="nano_modules";const o=document.createElement("div");return o.classList.add("nano_modules_modules"),o.id="nano_modules_modules",n.appendChild(e),n.appendChild(o),n.appendChild(u()),n}document.body.appendChild(a());const s=await(0,t.A)();if(s){const p=document.getElementById("nano_modules_modules");s.length>0?p.innerHTML="":p.innerHTML="<div class='nano_modules_no_modules'>No Modules found</div>";for(const[m,f]of s.entries())f&&l(f,m)}function i(n){if(n)return n.toString().replaceAll("() => import(","").replaceAll(")","").replaceAll('"',"")}async function l(n,e){let o=i(n),t="...",a=!1,s="...",l="...";const A=d(o,t,s,l,e);document.getElementById("nano_modules_modules").innerHTML+=A;const c=new((await n()).default);if(o=c.MODULE_NAME?c.MODULE_NAME:"-",t=c.MODULE_DESCRIPTION?c.MODULE_DESCRIPTION:"-",a=c.MODULE_PULSE||!1,s=c.MODULE_VERSION?c.MODULE_VERSION:"-",c.MODULE_MAIN&&"function"==typeof c.MODULE_MAIN)try{const n=r(e);l=await c.MODULE_MAIN(n)}catch(n){l=`<div class="nano_modules_module_error">${n.code}: ${n.message}</div>`}document.getElementById(`nano_module_${e}_name`).innerHTML=o,document.getElementById(`nano_module_${e}_description`).innerHTML=t,document.getElementById(`nano_module_${e}_version`).innerHTML=s,document.getElementById(`nano_module_${e}_output`).innerHTML=l,a&&document.getElementById(`nano_module_${e}_pulse`).classList.remove("hidden")}function d(n,e,o,t,a){return`\n<div class="nano_modules_module" id="nano_module_${a}">\n  <div class="nano_module_name">\n    <span class="bold">Name:</span>\n    <span id="nano_module_${a}_name">${n}</span>\n  </div>\n  <div class="nano_module_description">\n    <span class="bold">Description:</span>\n    <span id="nano_module_${a}_description">${e}</span>\n  </div>\n  <div class="nano_module_version">\n    <span class="bold">Version:</span> \n    <span id="nano_module_${a}_version">${o} </span>\n\n  </div>\n  <div class="nano_module_output">\n    <span class="bold">Output:</span>     \n    <div id="nano_module_${a}_pulse" class="nano_module_pulse hidden">\n      <span class="pulse"></span>\n      <span class="pulse"></span>\n      <span class="pulse"></span>\n      <span class="pulse"></span>\n      <span class="pulse"></span>\n</div>\n  </div>\n  <div class="nano_module_output_restricted_scrollable" id="nano_module_${a}_output">${t}</div>\n</div>\n`}function r(n){return{update:A(n),log:c(n)}}function A(n){return e=>{document.getElementById(`nano_module_${n}_output`).innerHTML=e}}function c(n){return e=>{const o=document.getElementById(`nano_module_${n}_output`),t=document.createElement("div");t.classList.add("nano_module_log"),t.innerHTML=e,o.prepend(t)}}function u(){const n=document.createElement("div");n.classList.add("nano_modules_footer");const e="https://github.com/M9J/nano-modules/actions/workflows/actions.yml/badge.svg",o="https://github.com/M9J/nano-modules/actions/workflows/pages/pages-build-deployment/badge.svg";return n.innerHTML=`\n  <div class="nano_modules_footer_row">\n    nano-modules/build: <img class="nano_modules_footer_badge" src="${e}"/>\n  </div>\n  <div class="nano_modules_footer_row">\n    nano-modules/deploy: <img class="nano_modules_footer_badge" src="${o}"/>\n  </div>\n  <div class="nano_modules_footer_row">\n    nano_modules/deploy: <img class="nano_modules_footer_badge" src="https://github.com/M9J/nano_modules/actions/workflows/pages/pages-build-deployment/badge.svg"/>\n  </div>\n  `,n}e()}catch(_){e(_)}}),1)}},n=>{n(n.s=838)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBVTFCLEdBQ2pCLE9BQVEyQixJQUNOLE1BQU1DLEVBQWtCOUQsU0FBU2lDLGVBQy9CLGVBQWVDLFlBRVg2QixFQUFlL0QsU0FBU1UsY0FBYyxPQUM1Q3FELEVBQWF0QyxVQUFVQyxJQUFJLG1CQUMzQnFDLEVBQWFuQyxVQUFZaUMsRUFDekJDLEVBQWdCRSxRQUFRRCxFQUFhLENBRXpDLENBRUEsU0FBU2xDLElBQ1AsTUFBTW9DLEVBQVNqRSxTQUFTVSxjQUFjLE9BQ3RDdUQsRUFBT3hDLFVBQVVDLElBQUksdUJBRXJCLE1BQU13QyxFQUdBLDhFQUhBQSxFQUtBLCtGQW9CTixPQVpBRCxFQUFPckMsVUFBWSxrSEFFaURzQyxpSUFHQ0EsOE9BTzlERCxDQUNULEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL25hbm8tbW9kdWxlcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL25hbm8tbW9kdWxlcy8uL3NyYy9OYW5vTW9kdWxlcy5qcyIsIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9zcmMvbmFub19tb2R1bGVzLmNzcyIsIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9zcmMvbmFub19tb2R1bGVzLmNzcz9mZGNhIiwid2VicGFjazovL25hbm8tbW9kdWxlcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL25hbm8tbW9kdWxlcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9uYW5vLW1vZHVsZXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vbmFuby1tb2R1bGVzLy4vc3JjL25hbm9fbW9kdWxlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zb2xlLmxvZyhcIj4gTmFub21vZC5qcyBfXCIpO1xuICBjb25zdCBOQU5PTU9EVUxFUyA9IFtdO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgTU9EVUxFX0lOREVYID0gYXdhaXQgZ2V0TW9kdWxlSW5kZXgoKTtcbiAgICBpZiAoTU9EVUxFX0lOREVYKSB7XG4gICAgICBjb25zdCBNT0RVTEVTID0gTU9EVUxFX0lOREVYLmRlZmF1bHQ7XG4gICAgICBjb25zdCBoYXNNb2R1bGVzID0gQXJyYXkuaXNBcnJheShNT0RVTEVTKSA/IE1PRFVMRVMubGVuZ3RoID4gMCA6IGZhbHNlO1xuICAgICAgaWYgKGhhc01vZHVsZXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBNT0RVTEUgb2YgTU9EVUxFUykge1xuICAgICAgICAgIE5BTk9NT0RVTEVTLnB1c2goTU9EVUxFKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnN0IHsgY29kZSwgbWVzc2FnZSB9ID0gZTtcbiAgICBjb25zb2xlLmxvZyhgJHtjb2RlfTogJHttZXNzYWdlfWApO1xuICB9XG5cbiAgcmV0dXJuIE5BTk9NT0RVTEVTO1xufVxuXG5jb25zdCBOQU5PTU9EVUxFU19VUkxfREVWID0gXCIuL25hbm9fbW9kdWxlcy9pbmRleC5qc1wiO1xuY29uc3QgTkFOT01PRFVMRVNfVVJMX1BST0QgPSBcImh0dHBzOi8vTTlKLmdpdGh1Yi5pby9uYW5vX21vZHVsZXMvaW5kZXguanNcIjtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0TW9kdWxlSW5kZXgoKSB7XG4gIHRyeSB7XG4gICAgbGV0IE5hbm9Nb2R1bGVzSW5kZXggPSBbXTtcbiAgICBjb25zdCBJU19QUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiO1xuICAgIGlmIChJU19QUk9EVUNUSU9OKSB7XG4gICAgICBOYW5vTW9kdWxlc0luZGV4ID0gYXdhaXQgaW1wb3J0KFxuICAgICAgICAvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovXG4gICAgICAgIE5BTk9NT0RVTEVTX1VSTF9QUk9EXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBOYW5vTW9kdWxlc0luZGV4ID0gYXdhaXQgaW1wb3J0KFxuICAgICAgICAvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovXG4gICAgICAgIE5BTk9NT0RVTEVTX1VSTF9ERVZcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBOYW5vTW9kdWxlc0luZGV4O1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gIH1cbn1cbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqLFxuYm9keSB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbn1cblxuYm9keSB7XG4gIGZvbnQtc2l6ZTogMWVtO1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgbGVmdDogMDtcbiAgYmFja2dyb3VuZDogIzAwMDtcbn1cblxuLm5hbm9fbW9kdWxlc19jb250YWluZXIge1xuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBwYWRkaW5nOiAwO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG4ubmFub19tb2R1bGVzX3RpdGxlIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbiAgcGFkZGluZzogOHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xuICBjb2xvcjogI2ZmZjtcbiAgcG9zaXRpb246IHN0aWNreTtcbiAgdG9wOiAwO1xufVxuXG4ubmFub19tb2R1bGVzX21vZHVsZXMge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIG1pbm1heCgzMjBweCwgMWZyKSk7XG4gIGdyaWQtZ2FwOiA4cHg7XG4gIHBhZGRpbmc6IDhweDtcbiAgYmFja2dyb3VuZDogI2VlZTtcbn1cblxuLm5hbm9fbW9kdWxlc19tb2R1bGUge1xuICBib3gtc2hhZG93OiAwcHggNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xuICBwYWRkaW5nOiA4cHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgYmFja2dyb3VuZDogI2ZmZjtcbn1cblxuLm5hbm9fbW9kdWxlc19ub19tb2R1bGVzIHtcbiAgcGFkZGluZzogOHB4O1xufVxuXG4ubmFub19tb2R1bGVzX21vZHVsZV9lcnJvciB7XG4gIGNvbG9yOiAjZjAwO1xufVxuXG4uYm9sZCB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XG59XG5cbi5uYW5vX21vZHVsZV9vdXRwdXQge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4ubmFub19tb2R1bGVfcHVsc2Uge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA4cHg7XG4gIG1hcmdpbi1sZWZ0OiAtOHB4O1xufVxuXG4ubmFub19tb2R1bGVfb3V0cHV0X3Jlc3RyaWN0ZWRfc2Nyb2xsYWJsZSB7XG4gIG1heC1oZWlnaHQ6IDh2aDtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi5wdWxzZSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2lkdGg6IDUwJTtcbiAgaGVpZ2h0OiA1cHg7XG4gIGJhY2tncm91bmQ6IGdvbGRlbnJvZDtcbiAgYW5pbWF0aW9uOiBwdWxzYXRpbmcgZWFzZS1pbi1vdXQgMXMgYWx0ZXJuYXRlIGluZmluaXRlO1xufVxuXG4ucHVsc2U6bnRoLWNoaWxkKDEpIHtcbiAgYW5pbWF0aW9uLWRlbGF5OiAwO1xufVxuXG4ucHVsc2U6bnRoLWNoaWxkKDIpIHtcbiAgYW5pbWF0aW9uLWRlbGF5OiAwLjI1cztcbn1cblxuLnB1bHNlOm50aC1jaGlsZCgzKSB7XG4gIGFuaW1hdGlvbi1kZWxheTogMC41cztcbn1cblxuLnB1bHNlOm50aC1jaGlsZCg0KSB7XG4gIGFuaW1hdGlvbi1kZWxheTogMC43NXM7XG59XG5cbi5wdWxzZTpudGgtY2hpbGQoNSkge1xuICBhbmltYXRpb24tZGVsYXk6IDFzO1xufVxuXG4uaGlkZGVuIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLm5hbm9fbW9kdWxlc19mb290ZXIge1xuICBiYWNrZ3JvdW5kOiAjMDAwO1xuICBjb2xvcjogI2ZmZjtcbiAgcGFkZGluZzogOHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xufVxuXG4ubmFub19tb2R1bGVzX2Zvb3Rlcl9yb3cge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG59XG5cbi5uYW5vX21vZHVsZXNfZm9vdGVyX2JhZGdlIHtcbiAgbWFyZ2luLWxlZnQ6IDhweDtcbn1cblxuQGtleWZyYW1lcyBwdWxzYXRpbmcge1xuICAwJSB7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxuICAxMDAlIHtcbiAgICBvcGFjaXR5OiAxO1xuICB9XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9uYW5vX21vZHVsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOztFQUVFLFNBQVM7RUFDVCxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxjQUFjO0VBQ2Qsc0JBQXNCO0VBQ3RCLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsV0FBVztFQUNYLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsTUFBTTtFQUNOLFFBQVE7RUFDUixTQUFTO0VBQ1QsT0FBTztFQUNQLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLE9BQU87RUFDUCxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFVBQVU7RUFDVixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxtQkFBbUI7RUFDbkIsWUFBWTtFQUNaLHNCQUFzQjtFQUN0QixXQUFXO0VBQ1gsZ0JBQWdCO0VBQ2hCLE1BQU07QUFDUjs7QUFFQTtFQUNFLGFBQWE7RUFDYiw0REFBNEQ7RUFDNUQsYUFBYTtFQUNiLFlBQVk7RUFDWixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSwyQ0FBMkM7RUFDM0MsWUFBWTtFQUNaLG9DQUFvQztFQUNwQyxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQiw4QkFBOEI7RUFDOUIsV0FBVztFQUNYLFlBQVk7RUFDWixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsY0FBYztBQUNoQjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixVQUFVO0VBQ1YsV0FBVztFQUNYLHFCQUFxQjtFQUNyQixzREFBc0Q7QUFDeEQ7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsV0FBVztFQUNYLFlBQVk7RUFDWixhQUFhO0VBQ2Isc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQiwyQkFBMkI7QUFDN0I7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRTtJQUNFLFVBQVU7RUFDWjtFQUNBO0lBQ0UsVUFBVTtFQUNaO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKixcXG5ib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbmJvZHkge1xcbiAgZm9udC1zaXplOiAxZW07XFxuICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxufVxcblxcbi5uYW5vX21vZHVsZXNfY29udGFpbmVyIHtcXG4gIGZsZXg6IDE7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4ubmFub19tb2R1bGVzX3RpdGxlIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcbiAgY29sb3I6ICNmZmY7XFxuICBwb3NpdGlvbjogc3RpY2t5O1xcbiAgdG9wOiAwO1xcbn1cXG5cXG4ubmFub19tb2R1bGVzX21vZHVsZXMge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZmlsbCwgbWlubWF4KDMyMHB4LCAxZnIpKTtcXG4gIGdyaWQtZ2FwOiA4cHg7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBiYWNrZ3JvdW5kOiAjZWVlO1xcbn1cXG5cXG4ubmFub19tb2R1bGVzX21vZHVsZSB7XFxuICBib3gtc2hhZG93OiAwcHggNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcbiAgcGFkZGluZzogOHB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEpO1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG59XFxuXFxuLm5hbm9fbW9kdWxlc19ub19tb2R1bGVzIHtcXG4gIHBhZGRpbmc6IDhweDtcXG59XFxuXFxuLm5hbm9fbW9kdWxlc19tb2R1bGVfZXJyb3Ige1xcbiAgY29sb3I6ICNmMDA7XFxufVxcblxcbi5ib2xkIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XFxufVxcblxcbi5uYW5vX21vZHVsZV9vdXRwdXQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbi5uYW5vX21vZHVsZV9wdWxzZSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogOHB4O1xcbiAgbWFyZ2luLWxlZnQ6IC04cHg7XFxufVxcblxcbi5uYW5vX21vZHVsZV9vdXRwdXRfcmVzdHJpY3RlZF9zY3JvbGxhYmxlIHtcXG4gIG1heC1oZWlnaHQ6IDh2aDtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbn1cXG5cXG4ucHVsc2Uge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDUwJTtcXG4gIGhlaWdodDogNXB4O1xcbiAgYmFja2dyb3VuZDogZ29sZGVucm9kO1xcbiAgYW5pbWF0aW9uOiBwdWxzYXRpbmcgZWFzZS1pbi1vdXQgMXMgYWx0ZXJuYXRlIGluZmluaXRlO1xcbn1cXG5cXG4ucHVsc2U6bnRoLWNoaWxkKDEpIHtcXG4gIGFuaW1hdGlvbi1kZWxheTogMDtcXG59XFxuXFxuLnB1bHNlOm50aC1jaGlsZCgyKSB7XFxuICBhbmltYXRpb24tZGVsYXk6IDAuMjVzO1xcbn1cXG5cXG4ucHVsc2U6bnRoLWNoaWxkKDMpIHtcXG4gIGFuaW1hdGlvbi1kZWxheTogMC41cztcXG59XFxuXFxuLnB1bHNlOm50aC1jaGlsZCg0KSB7XFxuICBhbmltYXRpb24tZGVsYXk6IDAuNzVzO1xcbn1cXG5cXG4ucHVsc2U6bnRoLWNoaWxkKDUpIHtcXG4gIGFuaW1hdGlvbi1kZWxheTogMXM7XFxufVxcblxcbi5oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLm5hbm9fbW9kdWxlc19mb290ZXIge1xcbiAgYmFja2dyb3VuZDogIzAwMDtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgcGFkZGluZzogOHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbi5uYW5vX21vZHVsZXNfZm9vdGVyX3JvdyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG59XFxuXFxuLm5hbm9fbW9kdWxlc19mb290ZXJfYmFkZ2Uge1xcbiAgbWFyZ2luLWxlZnQ6IDhweDtcXG59XFxuXFxuQGtleWZyYW1lcyBwdWxzYXRpbmcge1xcbiAgMCUge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgfVxcbiAgMTAwJSB7XFxuICAgIG9wYWNpdHk6IDE7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbmFub19tb2R1bGVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25hbm9fbW9kdWxlcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsImltcG9ydCBcIi4vbmFub19tb2R1bGVzLmNzc1wiO1xuaW1wb3J0IE5hbm9Nb2R1bGVzIGZyb20gXCIuL05hbm9Nb2R1bGVzXCI7XG5cbmZ1bmN0aW9uIGNvbXBvbmVudCgpIHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJuYW5vX21vZHVsZXNfY29udGFpbmVyXCIpO1xuXG4gIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdGl0bGUuY2xhc3NMaXN0LmFkZChcIm5hbm9fbW9kdWxlc190aXRsZVwiKTtcbiAgdGl0bGUuaW5uZXJIVE1MID0gXCJuYW5vX21vZHVsZXNcIjtcblxuICBjb25zdCBtb2R1bGVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgbW9kdWxlcy5jbGFzc0xpc3QuYWRkKFwibmFub19tb2R1bGVzX21vZHVsZXNcIik7XG4gIG1vZHVsZXMuaWQgPSBcIm5hbm9fbW9kdWxlc19tb2R1bGVzXCI7XG5cbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKG1vZHVsZXMpO1xuXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVGb290ZXIoKSk7XG4gIHJldHVybiBjb250YWluZXI7XG59XG5cbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29tcG9uZW50KCkpO1xuXG5jb25zdCBuYW5vTW9kdWxlcyA9IGF3YWl0IE5hbm9Nb2R1bGVzKCk7XG5pZiAobmFub01vZHVsZXMpIHtcbiAgY29uc3QgbmFub01vZHVsZXNNb2R1bGVDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICBcIm5hbm9fbW9kdWxlc19tb2R1bGVzXCJcbiAgKTtcbiAgaWYgKG5hbm9Nb2R1bGVzLmxlbmd0aCA+IDApIG5hbm9Nb2R1bGVzTW9kdWxlQ29udGFpbmVyLmlubmVySFRNTCA9IFwiXCI7XG4gIGVsc2VcbiAgICBuYW5vTW9kdWxlc01vZHVsZUNvbnRhaW5lci5pbm5lckhUTUwgPVxuICAgICAgXCI8ZGl2IGNsYXNzPSduYW5vX21vZHVsZXNfbm9fbW9kdWxlcyc+Tm8gTW9kdWxlcyBmb3VuZDwvZGl2PlwiO1xuICBmb3IgKGNvbnN0IFttb2RpZCwgbW9kdWxlXSBvZiBuYW5vTW9kdWxlcy5lbnRyaWVzKCkpIHtcbiAgICBpZiAobW9kdWxlKSB7XG4gICAgICBsb2FkTW9kdWxlKG1vZHVsZSwgbW9kaWQpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUZW1wUGxhY2Vob2xkZXJNb2R1bGVOYW1lKG1vZHVsZU5hbWUpIHtcbiAgaWYgKG1vZHVsZU5hbWUpXG4gICAgcmV0dXJuIG1vZHVsZU5hbWVcbiAgICAgIC50b1N0cmluZygpXG4gICAgICAucmVwbGFjZUFsbChcIigpID0+IGltcG9ydChcIiwgXCJcIilcbiAgICAgIC5yZXBsYWNlQWxsKFwiKVwiLCBcIlwiKVxuICAgICAgLnJlcGxhY2VBbGwoJ1wiJywgXCJcIik7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRNb2R1bGUobW9kdWxlLCBtb2RpZCkge1xuICBsZXQgbW9kdWxlTmFtZSA9IGdldFRlbXBQbGFjZWhvbGRlck1vZHVsZU5hbWUobW9kdWxlKTtcbiAgbGV0IG1vZHVsZURlc2NyaXB0aW9uID0gXCIuLi5cIjtcbiAgbGV0IG1vZHVsZVB1bHNlID0gZmFsc2U7XG4gIGxldCBtb2R1bGVWZXJzaW9uID0gXCIuLi5cIjtcbiAgbGV0IG1vZHVsZU91dHB1dCA9IFwiLi4uXCI7XG4gIGNvbnN0IHRlbXBsYXRlTG9hZGluZyA9IGJ1aWxkVGVtcGxhdGUoXG4gICAgbW9kdWxlTmFtZSxcbiAgICBtb2R1bGVEZXNjcmlwdGlvbixcbiAgICBtb2R1bGVWZXJzaW9uLFxuICAgIG1vZHVsZU91dHB1dCxcbiAgICBtb2RpZFxuICApO1xuICBjb25zdCBuYW5vTW9kdWxlc01vZHVsZUNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgIFwibmFub19tb2R1bGVzX21vZHVsZXNcIlxuICApO1xuICBuYW5vTW9kdWxlc01vZHVsZUNvbnRhaW5lci5pbm5lckhUTUwgKz0gdGVtcGxhdGVMb2FkaW5nO1xuICBjb25zdCBtb2R1bGVDbGFzcyA9IGF3YWl0IG1vZHVsZSgpO1xuICBjb25zdCBpbnN0YW5jZSA9IG5ldyBtb2R1bGVDbGFzcy5kZWZhdWx0KCk7XG4gIG1vZHVsZU5hbWUgPSBpbnN0YW5jZS5NT0RVTEVfTkFNRSA/IGluc3RhbmNlLk1PRFVMRV9OQU1FIDogXCItXCI7XG4gIG1vZHVsZURlc2NyaXB0aW9uID0gaW5zdGFuY2UuTU9EVUxFX0RFU0NSSVBUSU9OXG4gICAgPyBpbnN0YW5jZS5NT0RVTEVfREVTQ1JJUFRJT05cbiAgICA6IFwiLVwiO1xuICBtb2R1bGVQdWxzZSA9IGluc3RhbmNlLk1PRFVMRV9QVUxTRSB8fCBmYWxzZTtcbiAgbW9kdWxlVmVyc2lvbiA9IGluc3RhbmNlLk1PRFVMRV9WRVJTSU9OID8gaW5zdGFuY2UuTU9EVUxFX1ZFUlNJT04gOiBcIi1cIjtcbiAgaWYgKGluc3RhbmNlLk1PRFVMRV9NQUlOICYmIHR5cGVvZiBpbnN0YW5jZS5NT0RVTEVfTUFJTiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG91dHB1dE1vZGlmaWVycyA9IGNyZWF0ZU91dHB1dE1vZGlmaWVycyhtb2RpZCk7XG4gICAgICBtb2R1bGVPdXRwdXQgPSBhd2FpdCBpbnN0YW5jZS5NT0RVTEVfTUFJTihvdXRwdXRNb2RpZmllcnMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBtb2R1bGVPdXRwdXQgPSBgPGRpdiBjbGFzcz1cIm5hbm9fbW9kdWxlc19tb2R1bGVfZXJyb3JcIj4ke2Vycm9yLmNvZGV9OiAke2Vycm9yLm1lc3NhZ2V9PC9kaXY+YDtcbiAgICB9XG4gIH1cblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgbmFub19tb2R1bGVfJHttb2RpZH1fbmFtZWApLmlubmVySFRNTCA9IG1vZHVsZU5hbWU7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBuYW5vX21vZHVsZV8ke21vZGlkfV9kZXNjcmlwdGlvbmApLmlubmVySFRNTCA9XG4gICAgbW9kdWxlRGVzY3JpcHRpb247XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGBuYW5vX21vZHVsZV8ke21vZGlkfV92ZXJzaW9uYCkuaW5uZXJIVE1MID1cbiAgICBtb2R1bGVWZXJzaW9uO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgbmFub19tb2R1bGVfJHttb2RpZH1fb3V0cHV0YCkuaW5uZXJIVE1MID1cbiAgICBtb2R1bGVPdXRwdXQ7XG4gIGlmIChtb2R1bGVQdWxzZSkge1xuICAgIGRvY3VtZW50XG4gICAgICAuZ2V0RWxlbWVudEJ5SWQoYG5hbm9fbW9kdWxlXyR7bW9kaWR9X3B1bHNlYClcbiAgICAgIC5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkVGVtcGxhdGUobmFtZSwgZGVzY3JpcHRpb24sIHZlcnNpb24sIG91dHB1dCwgbW9kaWQpIHtcbiAgcmV0dXJuIGBcbjxkaXYgY2xhc3M9XCJuYW5vX21vZHVsZXNfbW9kdWxlXCIgaWQ9XCJuYW5vX21vZHVsZV8ke21vZGlkfVwiPlxuICA8ZGl2IGNsYXNzPVwibmFub19tb2R1bGVfbmFtZVwiPlxuICAgIDxzcGFuIGNsYXNzPVwiYm9sZFwiPk5hbWU6PC9zcGFuPlxuICAgIDxzcGFuIGlkPVwibmFub19tb2R1bGVfJHttb2RpZH1fbmFtZVwiPiR7bmFtZX08L3NwYW4+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibmFub19tb2R1bGVfZGVzY3JpcHRpb25cIj5cbiAgICA8c3BhbiBjbGFzcz1cImJvbGRcIj5EZXNjcmlwdGlvbjo8L3NwYW4+XG4gICAgPHNwYW4gaWQ9XCJuYW5vX21vZHVsZV8ke21vZGlkfV9kZXNjcmlwdGlvblwiPiR7ZGVzY3JpcHRpb259PC9zcGFuPlxuICA8L2Rpdj5cbiAgPGRpdiBjbGFzcz1cIm5hbm9fbW9kdWxlX3ZlcnNpb25cIj5cbiAgICA8c3BhbiBjbGFzcz1cImJvbGRcIj5WZXJzaW9uOjwvc3Bhbj4gXG4gICAgPHNwYW4gaWQ9XCJuYW5vX21vZHVsZV8ke21vZGlkfV92ZXJzaW9uXCI+JHt2ZXJzaW9ufSA8L3NwYW4+XG5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJuYW5vX21vZHVsZV9vdXRwdXRcIj5cbiAgICA8c3BhbiBjbGFzcz1cImJvbGRcIj5PdXRwdXQ6PC9zcGFuPiAgICAgXG4gICAgPGRpdiBpZD1cIm5hbm9fbW9kdWxlXyR7bW9kaWR9X3B1bHNlXCIgY2xhc3M9XCJuYW5vX21vZHVsZV9wdWxzZSBoaWRkZW5cIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwicHVsc2VcIj48L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzcz1cInB1bHNlXCI+PC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3M9XCJwdWxzZVwiPjwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzPVwicHVsc2VcIj48L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzcz1cInB1bHNlXCI+PC9zcGFuPlxuPC9kaXY+XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwibmFub19tb2R1bGVfb3V0cHV0X3Jlc3RyaWN0ZWRfc2Nyb2xsYWJsZVwiIGlkPVwibmFub19tb2R1bGVfJHttb2RpZH1fb3V0cHV0XCI+JHtvdXRwdXR9PC9kaXY+XG48L2Rpdj5cbmA7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU91dHB1dE1vZGlmaWVycyhtb2RpZCkge1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogdXBkYXRlT3V0cHV0KG1vZGlkKSxcbiAgICBsb2c6IGxvZ091dHB1dChtb2RpZCksXG4gIH07XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU91dHB1dChtb2RpZCkge1xuICByZXR1cm4gKG5ld091dHB1dCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgYG5hbm9fbW9kdWxlXyR7bW9kaWR9X291dHB1dGBcbiAgICApO1xuICAgIG91dHB1dENvbnRhaW5lci5pbm5lckhUTUwgPSBuZXdPdXRwdXQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGxvZ091dHB1dChtb2RpZCkge1xuICByZXR1cm4gKG5ld091dHB1dCkgPT4ge1xuICAgIGNvbnN0IG91dHB1dENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgYG5hbm9fbW9kdWxlXyR7bW9kaWR9X291dHB1dGBcbiAgICApO1xuICAgIGNvbnN0IGxvZ0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgbG9nQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoYG5hbm9fbW9kdWxlX2xvZ2ApO1xuICAgIGxvZ0NvbnRhaW5lci5pbm5lckhUTUwgPSBuZXdPdXRwdXQ7XG4gICAgb3V0cHV0Q29udGFpbmVyLnByZXBlbmQobG9nQ29udGFpbmVyKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRm9vdGVyKCkge1xuICBjb25zdCBmb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBmb290ZXIuY2xhc3NMaXN0LmFkZChcIm5hbm9fbW9kdWxlc19mb290ZXJcIik7XG5cbiAgY29uc3QgQkFER0VTID0ge1xuICAgIFwibmFuby1tb2R1bGVzXCI6IHtcbiAgICAgIGJ1aWxkOlxuICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9NOUovbmFuby1tb2R1bGVzL2FjdGlvbnMvd29ya2Zsb3dzL2FjdGlvbnMueW1sL2JhZGdlLnN2Z1wiLFxuICAgICAgZGVwbG95OlxuICAgICAgICBcImh0dHBzOi8vZ2l0aHViLmNvbS9NOUovbmFuby1tb2R1bGVzL2FjdGlvbnMvd29ya2Zsb3dzL3BhZ2VzL3BhZ2VzLWJ1aWxkLWRlcGxveW1lbnQvYmFkZ2Uuc3ZnXCIsXG4gICAgfSxcbiAgICBuYW5vX21vZHVsZXM6IHtcbiAgICAgIGRlcGxveTpcbiAgICAgICAgXCJodHRwczovL2dpdGh1Yi5jb20vTTlKL25hbm9fbW9kdWxlcy9hY3Rpb25zL3dvcmtmbG93cy9wYWdlcy9wYWdlcy1idWlsZC1kZXBsb3ltZW50L2JhZGdlLnN2Z1wiLFxuICAgIH0sXG4gIH07XG5cbiAgZm9vdGVyLmlubmVySFRNTCA9IGBcbiAgPGRpdiBjbGFzcz1cIm5hbm9fbW9kdWxlc19mb290ZXJfcm93XCI+XG4gICAgbmFuby1tb2R1bGVzL2J1aWxkOiA8aW1nIGNsYXNzPVwibmFub19tb2R1bGVzX2Zvb3Rlcl9iYWRnZVwiIHNyYz1cIiR7QkFER0VTW1wibmFuby1tb2R1bGVzXCJdLmJ1aWxkfVwiLz5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJuYW5vX21vZHVsZXNfZm9vdGVyX3Jvd1wiPlxuICAgIG5hbm8tbW9kdWxlcy9kZXBsb3k6IDxpbWcgY2xhc3M9XCJuYW5vX21vZHVsZXNfZm9vdGVyX2JhZGdlXCIgc3JjPVwiJHtCQURHRVNbXCJuYW5vLW1vZHVsZXNcIl0uZGVwbG95fVwiLz5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJuYW5vX21vZHVsZXNfZm9vdGVyX3Jvd1wiPlxuICAgIG5hbm9fbW9kdWxlcy9kZXBsb3k6IDxpbWcgY2xhc3M9XCJuYW5vX21vZHVsZXNfZm9vdGVyX2JhZGdlXCIgc3JjPVwiJHtCQURHRVMubmFub19tb2R1bGVzLmRlcGxveX1cIi8+XG4gIDwvZGl2PlxuICBgO1xuXG4gIHJldHVybiBmb290ZXI7XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsImlkIiwiX2siLCJwdXNoIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsImFzeW5jIiwiY29uc29sZSIsImxvZyIsIk5BTk9NT0RVTEVTIiwiTU9EVUxFX0lOREVYIiwiTmFub01vZHVsZXNJbmRleCIsImltcG9ydCIsIk5BTk9NT0RVTEVTX1VSTF9QUk9EIiwiZSIsImdldE1vZHVsZUluZGV4IiwiTU9EVUxFUyIsImRlZmF1bHQiLCJBcnJheSIsImlzQXJyYXkiLCJNT0RVTEUiLCJjb2RlIiwibWVzc2FnZSIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwib3B0aW9ucyIsInN0eWxlVGFnVHJhbnNmb3JtIiwic2V0QXR0cmlidXRlcyIsImluc2VydCIsImRvbUFQSSIsImluc2VydFN0eWxlRWxlbWVudCIsImxvY2FscyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImNvbXBvbmVudCIsImNvbnRhaW5lciIsImNsYXNzTGlzdCIsImFkZCIsInRpdGxlIiwiaW5uZXJIVE1MIiwiY3JlYXRlRm9vdGVyIiwiYm9keSIsIm5hbm9Nb2R1bGVzIiwibmFub01vZHVsZXNNb2R1bGVDb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsIm1vZGlkIiwiZW50cmllcyIsImxvYWRNb2R1bGUiLCJnZXRUZW1wUGxhY2Vob2xkZXJNb2R1bGVOYW1lIiwibW9kdWxlTmFtZSIsInJlcGxhY2VBbGwiLCJtb2R1bGVEZXNjcmlwdGlvbiIsIm1vZHVsZVB1bHNlIiwibW9kdWxlVmVyc2lvbiIsIm1vZHVsZU91dHB1dCIsInRlbXBsYXRlTG9hZGluZyIsImJ1aWxkVGVtcGxhdGUiLCJpbnN0YW5jZSIsIk1PRFVMRV9OQU1FIiwiTU9EVUxFX0RFU0NSSVBUSU9OIiwiTU9EVUxFX1BVTFNFIiwiTU9EVUxFX1ZFUlNJT04iLCJNT0RVTEVfTUFJTiIsIm91dHB1dE1vZGlmaWVycyIsImNyZWF0ZU91dHB1dE1vZGlmaWVycyIsImVycm9yIiwibmFtZSIsImRlc2NyaXB0aW9uIiwidmVyc2lvbiIsIm91dHB1dCIsInVwZGF0ZU91dHB1dCIsImxvZ091dHB1dCIsIm5ld091dHB1dCIsIm91dHB1dENvbnRhaW5lciIsImxvZ0NvbnRhaW5lciIsInByZXBlbmQiLCJmb290ZXIiLCJCQURHRVMiXSwic291cmNlUm9vdCI6IiJ9