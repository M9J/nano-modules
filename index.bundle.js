"use strict";(self.webpackChunknano_modules=self.webpackChunknano_modules||[]).push([[57,896],{89:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var o="",t=void 0!==e[5];return e[4]&&(o+="@supports (".concat(e[4],") {")),e[2]&&(o+="@media ".concat(e[2]," {")),t&&(o+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),o+=n(e),t&&(o+="}"),e[2]&&(o+="}"),e[4]&&(o+="}"),o})).join("")},e.i=function(n,o,t,a,s){"string"==typeof n&&(n=[[null,n,void 0]]);var r={};if(t)for(var i=0;i<this.length;i++){var d=this[i][0];null!=d&&(r[d]=!0)}for(var c=0;c<n.length;c++){var l=[].concat(n[c]);t&&r[l[0]]||(void 0!==s&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=s),o&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=o):l[2]=o),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},963:n=>{n.exports=function(n){var e=n[1],o=n[3];if(!o)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),s="/*# ".concat(a," */");return[e].concat([s]).join("\n")}return[e].join("\n")}},70:(n,e,o)=>{async function t(){console.log("> Nanomod.js _");const n=[];try{const e=await async function(){try{let n=[];return await fetch(NANOMODULES_URL_PROD1a),n=await import(a),n}catch(n){console.log(n)}}();if(e){const o=e.default;if(Array.isArray(o)&&o.length>0)for(const e of o)n.push(e)}}catch(n){const{code:e,message:o}=n;console.log(`${e}: ${o}`)}return n}o.d(e,{A:()=>t});const a="https://cdn.jsdelivr.net/gh/M9J/nano_modules/index.js"},11:(n,e,o)=>{o.d(e,{A:()=>i});var t=o(963),a=o.n(t),s=o(89),r=o.n(s)()(a());r.push([n.id,"*,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 1em;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n\n.nano_modules_container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.nano_modules_title {\n  font-weight: bolder;\n  padding: 8px;\n  background-color: #000;\n  color: #fff;\n  position: sticky;\n  top: 0;\n}\n\n.nano_modules_modules {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 8px;\n  padding: 8px;\n}\n\n.nano_modules_module {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);\n  padding: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.nano_modules_no_modules {\n  padding: 8px;\n}\n\n.nano_modules_module_error {\n  color: #f00;\n}\n.bold {\n  font-weight: bolder;\n}\n","",{version:3,sources:["webpack://./src/nano_modules.css"],names:[],mappings:"AAAA;;EAEE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,cAAc;EACd,sBAAsB;EACtB,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;AACT;;AAEA;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,sBAAsB;EACtB,WAAW;EACX,gBAAgB;EAChB,MAAM;AACR;;AAEA;EACE,aAAa;EACb,4DAA4D;EAC5D,aAAa;EACb,YAAY;AACd;;AAEA;EACE,2CAA2C;EAC3C,YAAY;EACZ,oCAAoC;AACtC;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;AACA;EACE,mBAAmB;AACrB",sourcesContent:["*,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 1em;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\n\n.nano_modules_container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.nano_modules_title {\n  font-weight: bolder;\n  padding: 8px;\n  background-color: #000;\n  color: #fff;\n  position: sticky;\n  top: 0;\n}\n\n.nano_modules_modules {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 8px;\n  padding: 8px;\n}\n\n.nano_modules_module {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);\n  padding: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n}\n\n.nano_modules_no_modules {\n  padding: 8px;\n}\n\n.nano_modules_module_error {\n  color: #f00;\n}\n.bold {\n  font-weight: bolder;\n}\n"],sourceRoot:""}]);const i=r},994:(n,e,o)=>{var t=o(72),a=o.n(t),s=o(825),r=o.n(s),i=o(659),d=o.n(i),c=o(56),l=o.n(c),u=o(540),A=o.n(u),p=o(113),m=o.n(p),f=o(11),E={};E.styleTagTransform=m(),E.setAttributes=l(),E.insert=d().bind(null,"head"),E.domAPI=r(),E.insertStyleElement=A(),a()(f.A,E),f.A&&f.A.locals&&f.A.locals},72:n=>{var e=[];function o(n){for(var o=-1,t=0;t<e.length;t++)if(e[t].identifier===n){o=t;break}return o}function t(n,t){for(var s={},r=[],i=0;i<n.length;i++){var d=n[i],c=t.base?d[0]+t.base:d[0],l=s[c]||0,u="".concat(c," ").concat(l);s[c]=l+1;var A=o(u),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var m=a(p,t);t.byIndex=i,e.splice(i,0,{identifier:u,updater:m,references:1})}r.push(u)}return r}function a(n,e){var o=e.domAPI(e);return o.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;o.update(n=e)}else o.remove()}}n.exports=function(n,a){var s=t(n=n||[],a=a||{});return function(n){n=n||[];for(var r=0;r<s.length;r++){var i=o(s[r]);e[i].references--}for(var d=t(n,a),c=0;c<s.length;c++){var l=o(s[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}s=d}}},659:n=>{var e={};n.exports=function(n,o){var t=function(n){if(void 0===e[n]){var o=document.querySelector(n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(n){o=null}e[n]=o}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(o)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,o)=>{n.exports=function(n){var e=o.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(o){!function(n,e,o){var t="";o.supports&&(t+="@supports (".concat(o.supports,") {")),o.media&&(t+="@media ".concat(o.media," {"));var a=void 0!==o.layer;a&&(t+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),t+=o.css,a&&(t+="}"),o.media&&(t+="}"),o.supports&&(t+="}");var s=o.sourceMap;s&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,o)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},838:(n,e,o)=>{o.a(n,(async(n,e)=>{try{o(994);var t=o(70);function a(){const n=document.createElement("div");n.classList.add("nano_modules_container");const e=document.createElement("div");e.classList.add("nano_modules_title"),e.innerHTML="nano_modules";const o=document.createElement("div");return o.classList.add("nano_modules_modules"),o.id="nano_modules_modules",n.appendChild(e),n.appendChild(o),n}document.body.appendChild(a());const s=await(0,t.A)();if(s){const d=document.getElementById("nano_modules_modules");s.length>0?d.innerHTML="":d.innerHTML="<div class='nano_modules_no_modules'>No Modules found</div>";let c=0;for(const l of s)if(l){const u=new l,A=u.MODULE_NAME?u.MODULE_NAME:"",p=u.MODULE_DESCRIPTION?u.MODULE_DESCRIPTION:"",m=u.MODULE_VERSION?u.MODULE_VERSION:"";let f="";if(u.MODULE_MAIN&&"function"==typeof u.MODULE_MAIN)try{f=await u.MODULE_MAIN(i(++c))}catch(_){f=`<div class="nano_modules_module_error">${_.code}: ${_.message}</div>`}const E=r(A,p,m,f,c);d.innerHTML+=E}}function r(n,e,o,t,a){return`<div class="nano_modules_module">\n      <div class="nano_module_name"><span class="bold">Name:</span> ${n}</div>\n      <div class="nano_module_description"><span class="bold">Description:</span> ${e}</div>\n      <div class="nano_module_version"><span class="bold">Version:</span> ${o}</div>\n      <div class="nano_module_output"><span class="bold">Output:</span><div class="nano_module_output_content" id="mod_${a}">${t}</div></div>\n  </div>`}function i(n){return e=>{document.getElementById("mod_"+n).innerHTML=e}}e()}catch(g){e(g)}}),1)}},n=>{n(n.s=838)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,