"use strict";(self.webpackChunknano_modules=self.webpackChunknano_modules||[]).push([[57],{89:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var o="",t=void 0!==e[5];return e[4]&&(o+="@supports (".concat(e[4],") {")),e[2]&&(o+="@media ".concat(e[2]," {")),t&&(o+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),o+=n(e),t&&(o+="}"),e[2]&&(o+="}"),e[4]&&(o+="}"),o})).join("")},e.i=function(n,o,t,a,i){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(t)for(var r=0;r<this.length;r++){var A=this[r][0];null!=A&&(s[A]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);t&&s[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),o&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=o):l[2]=o),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},963:n=>{n.exports=function(n){var e=n[1],o=n[3];if(!o)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(a," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},437:(n,e,o)=>{var t=o(72),a=o.n(t),i=o(825),s=o.n(i),r=o(659),A=o.n(r),d=o(56),l=o.n(d),c=o(540),u=o.n(c),p=o(113),m=o.n(p),g=o(497),f={};f.styleTagTransform=m(),f.setAttributes=l(),f.insert=A().bind(null,"head"),f.domAPI=s(),f.insertStyleElement=u(),a()(g.A,f),g.A&&g.A.locals&&g.A.locals;const E="https://M9J.github.io/nano_modules/index.js";document.body.appendChild(function(){const n=document.createElement("div");n.classList.add("nano_modules_container");const e=document.createElement("div");e.classList.add("nano_modules_title"),e.innerHTML="NanoModules";const o=document.createElement("div");return o.classList.add("nano_modules_modules"),o.id="nano_modules_modules",n.appendChild(e),n.appendChild(o),n.appendChild(function(){const n=document.createElement("div");return n.classList.add("nano_modules_footer"),n.innerHTML='\n    <div class="nano_modules_footer_row">\n      <a class="github-badge" href="https://github.com/m9j/nano-modules/actions">\n        <div class="github-badge-label">nano-modules</div>\n        <div class="github-badge-stage">ACTIONS</div>\n        <div class="github-badge-status">PASSED</div>\n      </a>\n    </div>\n    <div class="nano_modules_footer_row">\n      <a class="github-badge" href="https://github.com/m9j/nano_modules/actions">\n        <div class="github-badge-label">nano_modules</div>\n        <div class="github-badge-stage">ACTIONS</div>\n        <div class="github-badge-status">PASSED</div>\n      </a>\n    </div>\n  ',n}()),n}()),async function(){const n=await async function(){console.log("> Nanomod.js _");const n=[];try{const e=await async function(){try{let n=[];return n=await import(E),n}catch(n){console.log(n)}}();if(e){const o=e.default;if(Array.isArray(o)&&o.length>0)for(const e of o)n.push(e)}}catch(n){const{code:e,message:o}=n;console.log(`${e}: ${o}`)}return n}();if(n){const e=document.getElementById("nano_modules_modules");n.length>0?e.innerHTML="":e.innerHTML="<div class='nano_modules_no_modules'>No Modules found</div>";for(const[e,o]of n.entries())o&&await b(o,e);for(const n of _)n&&await C(n)}}();const _=[];async function b(n,e){let o=function(n){if(n)return n.toString().replaceAll("() => import(","").replaceAll(")","").replaceAll('"',"")}(n),t="...",a=!1,i="...";const s=function(n,e,o,t,a){return`\n<div class="nano_modules_module" id="nano_module_${a}">\n<div class="nano_module_name">\n<span class="bold">Name:</span>\n<span id="nano_module_${a}_name">${n}</span>\n</div>\n<div class="nano_module_description">\n<span class="bold">Description:</span>\n<span id="nano_module_${a}_description">${e}</span>\n</div>\n<div class="nano_module_output">\n<span class="bold">Output:</span>\n<span id="nano_module_${a}_pulse" class="pulse hidden">\n&nbsp;<span class="pulse_dot"></span>\n</span>\n<span class="expander">&nbsp;</span>\n<span class="bold">Version:</span>\n<span id="nano_module_${a}_version">${o} </span>\n</div>\n<div\nclass="nano_module_output_restricted_scrollable"\nid="nano_module_${a}_output"\n>\n\n</div>\n</div>\n`}(o,t,i,0,e);document.getElementById("nano_modules_modules").innerHTML+=s;const r=new((await n()).default);o=r.MODULE_NAME?r.MODULE_NAME:"-",t=r.MODULE_DESCRIPTION?r.MODULE_DESCRIPTION:"-",a=r.MODULE_PULSE||!1,i=r.MODULE_VERSION?r.MODULE_VERSION:"-";const A=r.MODULE_MAIL_ID||null,d=r.MODULE_MAIL_HANDLER||null;r.MODULE_OUTPUT=function(n){return{print:h(n),printLine:x(n)}}(e),A&&d&&(B.onReceive(A,d),r.MODULE_MAIL={send:B.send}),document.getElementById(`nano_module_${e}_name`).innerHTML=o,document.getElementById(`nano_module_${e}_description`).innerHTML=t,document.getElementById(`nano_module_${e}_version`).innerHTML=i,a&&document.getElementById(`nano_module_${e}_pulse`).classList.remove("hidden"),r.MODULE_ID=e,_.push(r)}async function C(n){if(n.MODULE_MAIN&&"function"==typeof n.MODULE_MAIN)try{await n.MODULE_MAIN()}catch(e){n.MODULE_OUTPUT.print(`ERROR: ${e.code}: ${e.message}`)}}const B=function(){const n={};return{onReceive:(e,o)=>{n[e]||(n[e]=o)},send:e=>{let o=setTimeout((()=>{clearTimeout(o),n[e.to]?n[e.to](e):console.log(`Recipient not found: ${e.to}`)}),v)}}}();function h(n){return e=>{document.getElementById(`nano_module_${n}_output`).innerHTML=e}}function x(n){return e=>{document.getElementById(`nano_module_${n}_output`).prepend(e,document.createElement("br"))}}const v=0},497:(n,e,o)=>{o.d(e,{A:()=>r});var t=o(963),a=o.n(t),i=o(89),s=o.n(i)()(a());s.push([n.id,"*,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 1em;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: #000;\n}\n\n.nano_modules_container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.nano_modules_title {\n  font-weight: bolder;\n  padding: 8px;\n  background-color: #000;\n  color: #fff;\n  position: sticky;\n  top: 0;\n  z-index: 1;\n}\n\n.nano_modules_modules {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 8px;\n  padding: 8px;\n  background: #eee;\n  flex: 1;\n  grid-auto-rows: max-content;\n}\n\n.nano_modules_module {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);\n  padding: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background: #fff;\n}\n\n.nano_modules_no_modules {\n  padding: 8px;\n}\n\n.nano_modules_module_error {\n  color: #f00;\n}\n\n.bold {\n  font-weight: bolder;\n}\n\n.nano_module_output {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.nano_module_output_restricted_scrollable {\n  max-height: 93px;\n  overflow: auto;\n}\n\n.pulse {\n  display: flex;\n  align-items: center;\n}\n\n.pulse_dot {\n  display: inline-block;\n  width: 16px;\n  height: 8px;\n  border-radius: 8px;\n  background: silver;\n  animation: pulse ease-in-out 1s infinite;\n}\n\n.pulse_dot:nth-child(even) {\n  animation-direction: reverse;\n}\n\n.hidden {\n  display: none;\n}\n\n.expander {\n  display: inline-block;\n  width: 100%;\n}\n\n.nano_modules_footer {\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.nano_modules_footer_row {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nano_modules_footer_badge {\n  margin-left: 8px;\n  max-height: 16px;\n}\n\n.github-badge {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 0px;\n  overflow: hidden;\n  border: 1px solid #333;\n  text-decoration: none;\n  color: #fff;\n}\n\n.github-badge-label {\n  padding: 4px 8px;\n  background-color: #222;\n}\n\n.github-badge-stage {\n  padding: 4px 8px;\n  background-color: #333;\n}\n\n.github-badge-status {\n  padding: 4px 8px;\n  background-color: green;\n}\n\n@keyframes pulse {\n  0% {\n    background: silver;\n  }\n  25% {\n    background: goldenrod;\n  }\n  50% {\n    background-color: silver;\n  }\n  75% {\n    background-color: greenyellow;\n  }\n  100% {\n    background: silver;\n  }\n}\n","",{version:3,sources:["webpack://./src/nano-modules.css"],names:[],mappings:"AAAA;;EAEE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,cAAc;EACd,sBAAsB;EACtB,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,QAAQ;EACR,SAAS;EACT,OAAO;EACP,gBAAgB;AAClB;;AAEA;EACE,OAAO;EACP,aAAa;EACb,sBAAsB;EACtB,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;EACnB,YAAY;EACZ,sBAAsB;EACtB,WAAW;EACX,gBAAgB;EAChB,MAAM;EACN,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,4DAA4D;EAC5D,aAAa;EACb,YAAY;EACZ,gBAAgB;EAChB,OAAO;EACP,2BAA2B;AAC7B;;AAEA;EACE,2CAA2C;EAC3C,YAAY;EACZ,oCAAoC;EACpC,gBAAgB;AAClB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,WAAW;EACX,WAAW;EACX,kBAAkB;EAClB,kBAAkB;EAClB,wCAAwC;AAC1C;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,qBAAqB;EACrB,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,YAAY;EACZ,aAAa;EACb,QAAQ;EACR,eAAe;EACf,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,2BAA2B;AAC7B;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,kBAAkB;EAClB,gBAAgB;EAChB,sBAAsB;EACtB,qBAAqB;EACrB,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE;IACE,kBAAkB;EACpB;EACA;IACE,qBAAqB;EACvB;EACA;IACE,wBAAwB;EAC1B;EACA;IACE,6BAA6B;EAC/B;EACA;IACE,kBAAkB;EACpB;AACF",sourcesContent:["*,\nbody {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-size: 1em;\n  font-family: monospace;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: #000;\n}\n\n.nano_modules_container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.nano_modules_title {\n  font-weight: bolder;\n  padding: 8px;\n  background-color: #000;\n  color: #fff;\n  position: sticky;\n  top: 0;\n  z-index: 1;\n}\n\n.nano_modules_modules {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 8px;\n  padding: 8px;\n  background: #eee;\n  flex: 1;\n  grid-auto-rows: max-content;\n}\n\n.nano_modules_module {\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25);\n  padding: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  background: #fff;\n}\n\n.nano_modules_no_modules {\n  padding: 8px;\n}\n\n.nano_modules_module_error {\n  color: #f00;\n}\n\n.bold {\n  font-weight: bolder;\n}\n\n.nano_module_output {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n\n.nano_module_output_restricted_scrollable {\n  max-height: 93px;\n  overflow: auto;\n}\n\n.pulse {\n  display: flex;\n  align-items: center;\n}\n\n.pulse_dot {\n  display: inline-block;\n  width: 16px;\n  height: 8px;\n  border-radius: 8px;\n  background: silver;\n  animation: pulse ease-in-out 1s infinite;\n}\n\n.pulse_dot:nth-child(even) {\n  animation-direction: reverse;\n}\n\n.hidden {\n  display: none;\n}\n\n.expander {\n  display: inline-block;\n  width: 100%;\n}\n\n.nano_modules_footer {\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  display: flex;\n  gap: 8px;\n  flex-wrap: wrap;\n  justify-content: center;\n}\n\n.nano_modules_footer_row {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n.nano_modules_footer_badge {\n  margin-left: 8px;\n  max-height: 16px;\n}\n\n.github-badge {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 0px;\n  overflow: hidden;\n  border: 1px solid #333;\n  text-decoration: none;\n  color: #fff;\n}\n\n.github-badge-label {\n  padding: 4px 8px;\n  background-color: #222;\n}\n\n.github-badge-stage {\n  padding: 4px 8px;\n  background-color: #333;\n}\n\n.github-badge-status {\n  padding: 4px 8px;\n  background-color: green;\n}\n\n@keyframes pulse {\n  0% {\n    background: silver;\n  }\n  25% {\n    background: goldenrod;\n  }\n  50% {\n    background-color: silver;\n  }\n  75% {\n    background-color: greenyellow;\n  }\n  100% {\n    background: silver;\n  }\n}\n"],sourceRoot:""}]);const r=s},72:n=>{var e=[];function o(n){for(var o=-1,t=0;t<e.length;t++)if(e[t].identifier===n){o=t;break}return o}function t(n,t){for(var i={},s=[],r=0;r<n.length;r++){var A=n[r],d=t.base?A[0]+t.base:A[0],l=i[d]||0,c="".concat(d," ").concat(l);i[d]=l+1;var u=o(c),p={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=a(p,t);t.byIndex=r,e.splice(r,0,{identifier:c,updater:m,references:1})}s.push(c)}return s}function a(n,e){var o=e.domAPI(e);return o.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;o.update(n=e)}else o.remove()}}n.exports=function(n,a){var i=t(n=n||[],a=a||{});return function(n){n=n||[];for(var s=0;s<i.length;s++){var r=o(i[s]);e[r].references--}for(var A=t(n,a),d=0;d<i.length;d++){var l=o(i[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=A}}},659:n=>{var e={};n.exports=function(n,o){var t=function(n){if(void 0===e[n]){var o=document.querySelector(n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(n){o=null}e[n]=o}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(o)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,o)=>{n.exports=function(n){var e=o.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(o){!function(n,e,o){var t="";o.supports&&(t+="@supports (".concat(o.supports,") {")),o.media&&(t+="@media ".concat(o.media," {"));var a=void 0!==o.layer;a&&(t+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),t+=o.css,a&&(t+="}"),o.media&&(t+="}"),o.supports&&(t+="}");var i=o.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,o)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},n=>{n(n.s=437)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,